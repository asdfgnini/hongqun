<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Aug 12 17:58:47 2024
<BR><P>
<H3>Maximum Stack Usage =       1004 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_gx_display_driver_565rgb_png_draw &rArr; _gx_image_reader_start &rArr; _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[45f]">_tx_initialize_low_level</a>
 <LI><a href="#[149]">__tx_BadHandler</a>
 <LI><a href="#[14a]">__tx_HardfaultHandler</a>
 <LI><a href="#[14b]">__tx_SVCallHandler</a>
 <LI><a href="#[4a4]">__tx_IntHandler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[4a5]">__tx_SysTickHandler</a>
 <LI><a href="#[14d]">__tx_NMIHandler</a>
 <LI><a href="#[14e]">__tx_DBGHandler</a>
 <LI><a href="#[461]">_tx_thread_schedule</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[4a6]">__tx_PendSVHandler</a>
 <LI><a href="#[4a7]">tx_thread_fpu_enable</a>
 <LI><a href="#[4a8]">tx_thread_fpu_disable</a>
 <LI><a href="#[467]">_tx_thread_stack_build</a>
 <LI><a href="#[14c]">_tx_timer_interrupt</a>
 <LI><a href="#[2]">HardFault_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[39c]">_gx_window_root_find</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39c]">_gx_window_root_find</a><BR>
 <LI><a href="#[37c]">_gx_system_view_split</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37a]">_gx_system_root_view_add</a><BR>
 <LI><a href="#[98]">AppTaskMsgPro</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">AppTaskMsgPro</a><BR>
 <LI><a href="#[487]">gx_studio_nested_widget_create</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[487]">gx_studio_nested_widget_create</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9b]">AppTaskGUI</a> from main.o(.text.AppTaskGUI) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[141]">AppTaskIDLE</a> from main.o(.text.AppTaskIDLE) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[98]">AppTaskMsgPro</a> from main.o(.text.AppTaskMsgPro) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[9c]">AppTaskNetXPro</a> from main.o(.text.AppTaskNetXPro) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[13f]">AppTaskStart</a> from main.o(.text.AppTaskStart) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[140]">AppTaskStat</a> from main.o(.text.AppTaskStat) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[9a]">AppTaskUserIF</a> from main.o(.text.AppTaskUserIF) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[9d]">App_Printf</a> from main.o(.text.App_Printf) referenced from main.o(.text.AppTaskUserIF)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from nx_stm32_eth_driver.o(.text.ETH_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from lan8720a.o(.text.ETH_GPIO_Config)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from bsp_led.o(.text.bsp_InitLed)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[9e]">HAL_GPIO_Init</a> from stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[a5]">HAL_MPU_ConfigRegion</a> from stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion) referenced from bsp.o(.text.System_init)
 <LI><a href="#[130]">HAL_SDRAM_SendCommand</a> from stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand) referenced from bsp_fmc_sdram.o(.text.bsp_InitExtSDRAM)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hardfaulthandler.o(OSKERNEL) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from bsp_tft_h7.o(.text.LTDC_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[132]">RS485_ReciveNew</a> from bsp_uart_fifo.o(.text.RS485_ReciveNew) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[134]">RS485_SendBefor</a> from bsp_uart_fifo.o(.text.RS485_SendBefor) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[133]">RS485_SendOver</a> from bsp_uart_fifo.o(.text.RS485_SendOver) referenced from bsp_uart_fifo.o(.text.bsp_InitUart)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a4]">STMPE811_WriteReg1</a> from bsp_ts_stmpe811.o(.text.STMPE811_WriteReg1) referenced from bsp_ts_stmpe811.o(.text.STMPE811_InitHard)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h7xx_it.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_uart_fifo.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_uart_fifo.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[a7]">_gx_button_deselect</a> from gx_button_deselect.o(.text._gx_button_deselect) referenced from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[a9]">_gx_button_draw</a> from gx_button_draw.o(.text._gx_button_draw) referenced from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[aa]">_gx_button_event_process</a> from gx_button_event_process.o(.text._gx_button_event_process) referenced from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[a8]">_gx_button_select</a> from gx_button_select.o(.text._gx_button_select) referenced from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[ab]">_gx_canvas_line_draw</a> from gx_canvas_line_draw.o(.text._gx_canvas_line_draw) referenced from gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_draw)
 <LI><a href="#[ab]">_gx_canvas_line_draw</a> from gx_canvas_line_draw.o(.text._gx_canvas_line_draw) referenced from gx_widget_border_draw.o(.text._gx_widget_border_draw)
 <LI><a href="#[106]">_gx_canvas_pixel_draw</a> from gx_canvas_pixel_draw.o(.text._gx_canvas_pixel_draw) referenced from gx_widget_border_draw.o(.text._gx_widget_border_draw)
 <LI><a href="#[ac]">_gx_canvas_rectangle_fill</a> from gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_fill) referenced from gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_draw)
 <LI><a href="#[b5]">_gx_display_driver_16bpp_block_move</a> from gx_display_driver_16bpp_block_move.o(.text._gx_display_driver_16bpp_block_move) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[ae]">_gx_display_driver_16bpp_canvas_copy</a> from gx_display_driver_16bpp_canvas_copy.o(.text._gx_display_driver_16bpp_canvas_copy) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d6]">_gx_display_driver_16bpp_glyph_1bit_draw</a> from gx_display_driver_565rgb_glyph_1bit_draw.o(.text._gx_display_driver_16bpp_glyph_1bit_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b1]">_gx_display_driver_16bpp_horizontal_line_draw</a> from gx_display_driver_16bpp_horizontal_line_draw.o(.text._gx_display_driver_16bpp_horizontal_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[af]">_gx_display_driver_16bpp_horizontal_pattern_line_draw</a> from gx_display_driver_16bpp_horizontal_pattern_line_draw.o(.text._gx_display_driver_16bpp_horizontal_pattern_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b6]">_gx_display_driver_16bpp_pixel_write</a> from gx_display_driver_16bpp_pixel_write.o(.text._gx_display_driver_16bpp_pixel_write) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b9]">_gx_display_driver_16bpp_pixelmap_rotate</a> from gx_display_driver_16bpp_pixelmap_rotate.o(.text._gx_display_driver_16bpp_pixelmap_rotate) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b3]">_gx_display_driver_16bpp_row_pitch_get</a> from gx_display_driver_16bpp_row_pitch_get.o(.text._gx_display_driver_16bpp_row_pitch_get) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b2]">_gx_display_driver_16bpp_simple_line_draw</a> from gx_display_driver_16bpp_simple_line_draw.o(.text._gx_display_driver_16bpp_simple_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b0]">_gx_display_driver_16bpp_vertical_line_draw</a> from gx_display_driver_16bpp_vertical_line_draw.o(.text._gx_display_driver_16bpp_vertical_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b7]">_gx_display_driver_16bpp_vertical_pattern_line_draw</a> from gx_display_driver_16bpp_vertical_pattern_line_draw.o(.text._gx_display_driver_16bpp_vertical_pattern_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d1]">_gx_display_driver_565rgb_canvas_blend</a> from gx_display_driver_565rgb_canvas_blend.o(.text._gx_display_driver_565rgb_canvas_blend) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[b8]">_gx_display_driver_565rgb_horizontal_pixelmap_line_draw</a> from gx_display_driver_565rgb_horizontal_pixelmap_line_draw.o(.text._gx_display_driver_565rgb_horizontal_pixelmap_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d7]">_gx_display_driver_565rgb_jpeg_draw</a> from gx_display_driver_565rgb_jpeg_draw.o(.text._gx_display_driver_565rgb_jpeg_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[ad]">_gx_display_driver_565rgb_mcu_draw</a> from gx_display_driver_565rgb_jpeg_draw.o(.text._gx_display_driver_565rgb_mcu_draw) referenced from gx_display_driver_565rgb_jpeg_draw.o(.text._gx_display_driver_565rgb_jpeg_draw)
 <LI><a href="#[b4]">_gx_display_driver_565rgb_native_color_get</a> from gx_display_driver_565rgb_native_color_get.o(.text._gx_display_driver_565rgb_native_color_get) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d2]">_gx_display_driver_565rgb_pixel_blend</a> from gx_display_driver_565rgb_pixel_blend.o(.text._gx_display_driver_565rgb_pixel_blend) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d3]">_gx_display_driver_565rgb_pixelmap_blend</a> from gx_display_driver_16bpp_pixelmap_blend.o(.text._gx_display_driver_565rgb_pixelmap_blend) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[ba]">_gx_display_driver_565rgb_pixelmap_draw</a> from gx_display_driver_16bpp_pixelmap_draw.o(.text._gx_display_driver_565rgb_pixelmap_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d8]">_gx_display_driver_565rgb_png_draw</a> from gx_display_driver_565rgb_png_draw.o(.text._gx_display_driver_565rgb_png_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c6]">_gx_display_driver_generic_aliased_arc_draw</a> from gx_display_driver_generic_aliased_arc_draw.o(.text._gx_display_driver_generic_aliased_arc_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c1]">_gx_display_driver_generic_aliased_circle_draw</a> from gx_display_driver_generic_aliased_circle_draw.o(.text._gx_display_driver_generic_aliased_circle_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c2]">_gx_display_driver_generic_aliased_ellipse_draw</a> from gx_display_driver_generic_aliased_ellipse_draw.o(.text._gx_display_driver_generic_aliased_ellipse_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[db]">_gx_display_driver_generic_aliased_fixed_point_line_draw</a> from gx_display_driver_generic_aliased_fixed_point_line_draw.o(.text._gx_display_driver_generic_aliased_fixed_point_line_draw) referenced from gx_display_driver_generic_wide_line_points_calculate.o(.text._gx_display_driver_generic_wide_line_points_calculate)
 <LI><a href="#[bf]">_gx_display_driver_generic_aliased_line_draw</a> from gx_display_driver_generic_aliased_line_draw.o(.text._gx_display_driver_generic_aliased_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[ce]">_gx_display_driver_generic_aliased_wide_arc_draw</a> from gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_aliased_wide_arc_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[cb]">_gx_display_driver_generic_aliased_wide_circle_draw</a> from gx_display_driver_generic_aliased_wide_circle_draw.o(.text._gx_display_driver_generic_aliased_wide_circle_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[cc]">_gx_display_driver_generic_aliased_wide_ellipse_draw</a> from gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text._gx_display_driver_generic_aliased_wide_ellipse_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c0]">_gx_display_driver_generic_aliased_wide_line_draw</a> from gx_display_driver_generic_aliased_wide_line_draw.o(.text._gx_display_driver_generic_aliased_wide_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[bc]">_gx_display_driver_generic_alphamap_draw</a> from gx_display_driver_generic_alphamap_draw.o(.text._gx_display_driver_generic_alphamap_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c7]">_gx_display_driver_generic_arc_draw</a> from gx_display_driver_generic_arc_draw.o(.text._gx_display_driver_generic_arc_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c8]">_gx_display_driver_generic_arc_fill</a> from gx_display_driver_generic_arc_fill.o(.text._gx_display_driver_generic_arc_fill) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c3]">_gx_display_driver_generic_circle_draw</a> from gx_display_driver_generic_circle_draw.o(.text._gx_display_driver_generic_circle_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c4]">_gx_display_driver_generic_circle_fill</a> from gx_display_driver_generic_circle_fill.o(.text._gx_display_driver_generic_circle_fill) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c9]">_gx_display_driver_generic_ellipse_draw</a> from gx_display_driver_generic_ellipse_draw.o(.text._gx_display_driver_generic_ellipse_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[ca]">_gx_display_driver_generic_ellipse_fill</a> from gx_display_driver_generic_ellipse_fill.o(.text._gx_display_driver_generic_ellipse_fill) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d5]">_gx_display_driver_generic_glyph_4bit_draw</a> from gx_display_driver_generic_glyph_4bpp_draw.o(.text._gx_display_driver_generic_glyph_4bit_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d4]">_gx_display_driver_generic_glyph_8bit_draw</a> from gx_display_driver_generic_glyph_8bpp_draw.o(.text._gx_display_driver_generic_glyph_8bit_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[c5]">_gx_display_driver_generic_pie_fill</a> from gx_display_driver_generic_pie_fill.o(.text._gx_display_driver_generic_pie_fill) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[bd]">_gx_display_driver_generic_polygon_draw</a> from gx_display_driver_generic_polygon_draw.o(.text._gx_display_driver_generic_polygon_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[be]">_gx_display_driver_generic_polygon_fill</a> from gx_display_driver_generic_polygon_fill.o(.text._gx_display_driver_generic_polygon_fill) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[bb]">_gx_display_driver_generic_simple_wide_line_draw</a> from gx_display_driver_generic_simple_wide_line_draw.o(.text._gx_display_driver_generic_simple_wide_line_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[d0]">_gx_display_driver_generic_wide_arc_draw</a> from gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_wide_arc_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[cd]">_gx_display_driver_generic_wide_circle_draw</a> from gx_display_driver_generic_wide_circle_draw.o(.text._gx_display_driver_generic_wide_circle_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[cf]">_gx_display_driver_generic_wide_ellipse_draw</a> from gx_display_driver_generic_wide_ellipse_draw.o(.text._gx_display_driver_generic_wide_ellipse_draw) referenced from gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
 <LI><a href="#[e5]">_gx_image_reader_1555xrgb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[fe]">_gx_image_reader_1555xrgb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[fd]">_gx_image_reader_1555xrgb_rle_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_rle_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ed]">_gx_image_reader_16bit_gray_alpha_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_alpha_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[ee]">_gx_image_reader_16bit_gray_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f2]">_gx_image_reader_1bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[df]">_gx_image_reader_1bpp_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[de]">_gx_image_reader_1bpp_transparent_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_transparent_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[eb]">_gx_image_reader_24bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_24bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[fa]">_gx_image_reader_24xrgb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_24xrgb_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[f1]">_gx_image_reader_2bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_2bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[e7]">_gx_image_reader_32argb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32argb_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f9]">_gx_image_reader_32argb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_32argb_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ec]">_gx_image_reader_32bit_gray_alpha_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_gray_alpha_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[ea]">_gx_image_reader_32bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[e2]">_gx_image_reader_4444argb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4444argb_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[fc]">_gx_image_reader_4444argb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[fb]">_gx_image_reader_4444argb_transparent_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_transparent_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[e9]">_gx_image_reader_48bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_48bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[e0]">_gx_image_reader_4bit_grayscale_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f5]">_gx_image_reader_4bit_grayscale_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[e1]">_gx_image_reader_4bit_grayscale_transparent_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f6]">_gx_image_reader_4bit_grayscale_transparent_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[f0]">_gx_image_reader_4bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[e6]">_gx_image_reader_565rgb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_565rgb_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[100]">_gx_image_reader_565rgb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ff]">_gx_image_reader_565rgb_rle_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_rle_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[e8]">_gx_image_reader_64bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_64bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[e3]">_gx_image_reader_8bit_alpha_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_alpha_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f8]">_gx_image_reader_8bit_alpha_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_alpha_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[e4]">_gx_image_reader_8bit_palette_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_palette_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f7]">_gx_image_reader_8bit_palette_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_palette_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ef]">_gx_image_reader_8bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_pixel_read) referenced from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[f3]">_gx_image_reader_monochrome_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_pixel_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[f4]">_gx_image_reader_monochrome_transparent_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_transparent_write) referenced from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[dc]">_gx_image_reader_one_row_convert</a> from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_convert) referenced from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
 <LI><a href="#[dd]">_gx_image_reader_one_row_dither</a> from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_dither) referenced from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
 <LI><a href="#[102]">_gx_prompt_draw</a> from gx_prompt_draw.o(.text._gx_prompt_draw) referenced from gx_prompt_create.o(.text._gx_prompt_create)
 <LI><a href="#[101]">_gx_prompt_text_get_ext</a> from gx_prompt_text_get.o(.text._gx_prompt_text_get_ext) referenced from gx_prompt_create.o(.text._gx_prompt_create)
 <LI><a href="#[104]">_gx_system_thread_entry</a> from gx_system_thread_entry.o(.text._gx_system_thread_entry) referenced from gx_system_initialize.o(.text._gx_system_initialize)
 <LI><a href="#[103]">_gx_system_timer_expiration</a> from gx_system_timer_expiration.o(.text._gx_system_timer_expiration) referenced from gx_system_initialize.o(.text._gx_system_initialize)
 <LI><a href="#[105]">_gx_text_button_draw</a> from gx_text_button_draw.o(.text._gx_text_button_draw) referenced from gx_text_button_create.o(.text._gx_text_button_create)
 <LI><a href="#[da]">_gx_utility_circle_point_get</a> from gx_utility_circle_point_get.o(.text._gx_utility_circle_point_get) referenced from gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_simple_aliased_wide_arc_draw)
 <LI><a href="#[da]">_gx_utility_circle_point_get</a> from gx_utility_circle_point_get.o(.text._gx_utility_circle_point_get) referenced from gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_simple_wide_arc_draw)
 <LI><a href="#[d9]">_gx_utility_rectangle_overlap_detect</a> from gx_utility_rectangle_overlap_detect.o(.text._gx_utility_rectangle_overlap_detect) referenced from gx_display_driver_generic_aliased_arc_draw.o(.text._gx_display_driver_generic_aliased_arc_draw)
 <LI><a href="#[d9]">_gx_utility_rectangle_overlap_detect</a> from gx_utility_rectangle_overlap_detect.o(.text._gx_utility_rectangle_overlap_detect) referenced from gx_display_driver_generic_arc_draw.o(.text._gx_display_driver_generic_arc_draw)
 <LI><a href="#[107]">_gx_widget_draw</a> from gx_widget_draw.o(.text._gx_widget_draw) referenced from gx_widget_create.o(.text._gx_widget_create)
 <LI><a href="#[108]">_gx_widget_event_process</a> from gx_widget_event_process.o(.text._gx_widget_event_process) referenced from gx_widget_create.o(.text._gx_widget_create)
 <LI><a href="#[109]">_gx_window_draw</a> from gx_window_draw.o(.text._gx_window_draw) referenced from gx_window_create.o(.text._gx_window_create)
 <LI><a href="#[10b]">_gx_window_event_process</a> from gx_window_event_process.o(.text._gx_window_event_process) referenced from gx_window_create.o(.text._gx_window_create)
 <LI><a href="#[10c]">_gx_window_root_event_process</a> from gx_window_root_event_process.o(.text._gx_window_root_event_process) referenced from gx_window_root_create.o(.text._gx_window_root_create)
 <LI><a href="#[10a]">_gx_window_scroll_info_get</a> from gx_window_scroll_info_get.o(.text._gx_window_scroll_info_get) referenced from gx_window_create.o(.text._gx_window_create)
 <LI><a href="#[110]">_nx_arp_entry_allocate</a> from nx_arp_entry_allocate.o(.text._nx_arp_entry_allocate) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[10d]">_nx_arp_packet_send</a> from nx_arp_packet_send.o(.text._nx_arp_packet_send) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[10f]">_nx_arp_periodic_update</a> from nx_arp_periodic_update.o(.text._nx_arp_periodic_update) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[10e]">_nx_arp_queue_process</a> from nx_arp_queue_process.o(.text._nx_arp_queue_process) referenced from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[112]">_nx_icmp_packet_receive</a> from nx_icmp_packet_receive.o(.text._nx_icmp_packet_receive) referenced from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[113]">_nx_icmp_queue_process</a> from nx_icmp_queue_process.o(.text._nx_icmp_queue_process) referenced from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[111]">_nx_icmpv4_packet_process</a> from nx_icmpv4_packet_process.o(.text._nx_icmpv4_packet_process) referenced from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[117]">_nx_ip_fast_periodic_timer_entry</a> from nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_entry) referenced from nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create)
 <LI><a href="#[119]">_nx_ip_fragment_assembly</a> from nx_ip_fragment_assembly.o(.text._nx_ip_fragment_assembly) referenced from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[11a]">_nx_ip_fragment_packet</a> from nx_ip_fragment_packet.o(.text._nx_ip_fragment_packet) referenced from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[118]">_nx_ip_fragment_timeout_check</a> from nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_timeout_check) referenced from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[115]">_nx_ip_periodic_timer_entry</a> from nx_ip_periodic_timer_entry.o(.text._nx_ip_periodic_timer_entry) referenced from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[114]">_nx_ip_thread_entry</a> from nx_ip_thread_entry.o(.text._nx_ip_thread_entry) referenced from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[116]">_nx_ipv4_packet_receive</a> from nx_ipv4_packet_receive.o(.text._nx_ipv4_packet_receive) referenced from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[11b]">_nx_packet_pool_cleanup</a> from nx_packet_pool_cleanup.o(.text._nx_packet_pool_cleanup) referenced from nx_packet_allocate.o(.text._nx_packet_allocate)
 <LI><a href="#[11c]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced from nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup)
 <LI><a href="#[11c]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced from nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup)
 <LI><a href="#[11c]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced from nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup)
 <LI><a href="#[122]">_nx_tcp_connect_cleanup</a> from nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup) referenced from nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept)
 <LI><a href="#[11e]">_nx_tcp_deferred_cleanup_check</a> from nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[123]">_nx_tcp_disconnect_cleanup</a> from nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup) referenced from nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect)
 <LI><a href="#[11f]">_nx_tcp_fast_periodic_processing</a> from nx_tcp_fast_periodic_processing.o(.text._nx_tcp_fast_periodic_processing) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[121]">_nx_tcp_packet_receive</a> from nx_tcp_packet_receive.o(.text._nx_tcp_packet_receive) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[120]">_nx_tcp_periodic_processing</a> from nx_tcp_periodic_processing.o(.text._nx_tcp_periodic_processing) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[11d]">_nx_tcp_queue_process</a> from nx_tcp_queue_process.o(.text._nx_tcp_queue_process) referenced from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[124]">_nx_tcp_receive_cleanup</a> from nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup) referenced from nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive)
 <LI><a href="#[125]">_nx_tcp_transmit_cleanup</a> from nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup) referenced from nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal)
 <LI><a href="#[126]">_nx_udp_packet_receive</a> from nx_udp_packet_receive.o(.text._nx_udp_packet_receive) referenced from nx_udp_enable.o(.text._nx_udp_enable)
 <LI><a href="#[143]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[127]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
 <LI><a href="#[128]">_tx_event_flags_cleanup</a> from tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup) referenced from tx_event_flags_get.o(.text._tx_event_flags_get)
 <LI><a href="#[12a]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[129]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[12b]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced from tx_queue_send.o(.text._tx_queue_send)
 <LI><a href="#[12c]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[12e]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[12d]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[12f]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[99]">_txe_thread_create</a> from txe_thread_create.o(.text._txe_thread_create) referenced from main.o(.text.AppTaskStart)
 <LI><a href="#[99]">_txe_thread_create</a> from txe_thread_create.o(.text._txe_thread_create) referenced from main.o(.text.tx_application_define)
 <LI><a href="#[a6]">bsp_DelayUS</a> from bsp_dwt.o(.text.bsp_DelayUS) referenced from bsp_ts_touch.o(.text.TOUCH_IntWakeUpForGT)
 <LI><a href="#[131]">bsp_LedOff</a> from bsp_led.o(.text.bsp_LedOff) referenced from bsp_led.o(.text.bsp_InitLed)
 <LI><a href="#[142]">fputc</a> from bsp_uart_fifo.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[13b]">gx_chromeart_canvas_copy</a> from gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_canvas_copy) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[13c]">gx_chromeart_glyph_8bit_draw</a> from gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_glyph_8bit_draw) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[13e]">gx_chromeart_horizontal_line_draw</a> from gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_horizontal_line_draw) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[13a]">gx_chromeart_pixelmap_blend</a> from gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_pixelmap_blend) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[139]">gx_chromeart_pixelmap_draw</a> from gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_pixelmap_draw) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[13d]">gx_chromeart_vertical_line_draw</a> from gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_vertical_line_draw) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[146]">gx_studio_prompt_create</a> from guiapp_specifications.o(.text.gx_studio_prompt_create) referenced from guiapp_specifications.o(.rodata.window_prompt_define)
 <LI><a href="#[144]">gx_studio_text_button_create</a> from guiapp_specifications.o(.text.gx_studio_text_button_create) referenced from guiapp_specifications.o(.rodata.window_button_define)
 <LI><a href="#[145]">gx_studio_window_create</a> from guiapp_specifications.o(.text.gx_studio_window_create) referenced from guiapp_specifications.o(.rodata.window_define)
 <LI><a href="#[137]">i2c_Delay</a> from bsp_i2c_gpio.o(.text.i2c_Delay) referenced from bsp_i2c_gpio.o(.text.i2c_WaitAck)
 <LI><a href="#[9f]">i2c_SendByte</a> from bsp_i2c_gpio.o(.text.i2c_SendByte) referenced from bsp_ts_gt811.o(.text.GT811_WriteReg)
 <LI><a href="#[9f]">i2c_SendByte</a> from bsp_i2c_gpio.o(.text.i2c_SendByte) referenced from bsp_ts_gt911.o(.text.GT911_Scan)
 <LI><a href="#[a0]">i2c_WaitAck</a> from bsp_i2c_gpio.o(.text.i2c_WaitAck) referenced from bsp_ts_gt811.o(.text.GT811_WriteReg)
 <LI><a href="#[a0]">i2c_WaitAck</a> from bsp_i2c_gpio.o(.text.i2c_WaitAck) referenced from bsp_ts_gt911.o(.text.GT911_Scan)
 <LI><a href="#[95]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[135]">memory_allocate</a> from app_sysfunction.o(.text.memory_allocate) referenced from app_sysfunction.o(.text.gx_initconfig)
 <LI><a href="#[136]">memory_free</a> from app_sysfunction.o(.text.memory_free) referenced from app_sysfunction.o(.text.gx_initconfig)
 <LI><a href="#[a2]">nx_driver_stm32h7xx</a> from nx_stm32_eth_driver.o(.text.nx_driver_stm32h7xx) referenced from demo_lan8720a_netx.o(.text.NetXTest)
 <LI><a href="#[138]">stm32h7_565rgb_buffer_toggle</a> from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_565rgb_buffer_toggle) referenced from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
 <LI><a href="#[a1]">stm32h7_graphics_driver_setup_565rgb</a> from gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb) referenced from maintask.o(.text.MainTask)
 <LI><a href="#[a3]">tcp_listen_callback</a> from demo_lan8720a_netx.o(.text.tcp_listen_callback) referenced from demo_lan8720a_netx.o(.text.NetXTest)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[49e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[147]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[160]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45f]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[149]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[14a]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[14b]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[4a4]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a5]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[14e]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[461]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a6]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[14c]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[433]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[4a9]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[4aa]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_canvas_copy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_polygon_fill
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_one_row_dither
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_scroll_appearance_set
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_retrieve
</UL>

<P><STRONG><a name="[2d4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
</UL>

<P><STRONG><a name="[4ab]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4ac]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[4ad]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_write_callback_set
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_colorspace_convert
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_allocate
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_enable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_create
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_create
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_brush_default
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_create
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_mcu_decode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_fill
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_circle_fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_polygon_fill
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_create
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_active_language_set
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_one_row_dither
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_create
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_create
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[156]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[485]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
</UL>

<P><STRONG><a name="[172]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IP_ADDRESSES_BY_PREFIX
</UL>

<P><STRONG><a name="[4ae]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4af]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4b0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[148]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4b2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[159]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>CHECK_IPV6_ADDRESSES_SAME</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.CHECK_IPV6_ADDRESSES_SAME))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_invalidate_destination_entry
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[171]"></a>CHECK_IP_ADDRESSES_BY_PREFIX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nx_ipv6_util.o(.text.CHECK_IP_ADDRESSES_BY_PREFIX))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHECK_IP_ADDRESSES_BY_PREFIX &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
</UL>

<P><STRONG><a name="[173]"></a>CHECK_UNSPECIFIED_ADDRESS</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.CHECK_UNSPECIFIED_ADDRESS))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>

<P><STRONG><a name="[3f1]"></a>COPY_IPV6_ADDRESS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.COPY_IPV6_ADDRESS))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[174]"></a>ComToUart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_uart_fifo.o(.text.ComToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>ETH_GPIO_Config</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, lan8720a.o(.text.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_stm32_eth_driver.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[1ed]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1f0]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[1f1]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[17c]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32h7xx_ll_fmc.o(.text.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[28d]"></a>FT5X06_InitHard</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(.text.FT5X06_InitHard))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[17e]"></a>FT5X06_ReadID</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_ts_ft5x06.o(.text.FT5X06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT5X06_ReadID &rArr; FT5X06_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[185]"></a>FT5X06_Scan</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, bsp_ts_ft5x06.o(.text.FT5X06_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = FT5X06_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PenInt
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[29b]"></a>FT5X06_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(.text.FT5X06_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[188]"></a>GT811_InitHard</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_ts_gt811.o(.text.GT811_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT811_InitHard &rArr; GT811_WriteReg &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[18b]"></a>GT811_Scan</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, bsp_ts_gt811.o(.text.GT811_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GT811_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[299]"></a>GT811_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_gt811.o(.text.GT811_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[18c]"></a>GT911_InitHard</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_gt911.o(.text.GT911_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GT911_InitHard &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[18e]"></a>GT911_ReadID</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_ts_gt911.o(.text.GT911_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT911_ReadID &rArr; GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[190]"></a>GT911_ReadMaxXY</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bsp_ts_gt911.o(.text.GT911_ReadMaxXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GT911_ReadMaxXY &rArr; GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[191]"></a>GT911_Scan</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bsp_ts_gt911.o(.text.GT911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GT911_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[29a]"></a>GT911_Timer1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_gt911.o(.text.GT911_Timer1ms))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[192]"></a>HAL_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Delay &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[48c]"></a>HAL_ETH_BuildRxDescriptors</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_BuildRxDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_BuildRxDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[198]"></a>HAL_ETH_DMAErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DMAErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[48d]"></a>HAL_ETH_DescAssignMemory</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DescAssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[19b]"></a>HAL_ETH_EEECallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_EEECallback))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[48e]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetMACConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[193]"></a>HAL_ETH_GetRxDataBuffer</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetRxDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[195]"></a>HAL_ETH_GetRxDataLength</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetRxDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_GetRxDataLength &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[17b]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WakeUpCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_EEECallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_PMTCallback
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MACErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMAErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>HAL_ETH_Init</STRONG> (Thumb, 568 bytes, Stack size 160 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[194]"></a>HAL_ETH_IsRxDataAvailable</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IsRxDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
</UL>

<P><STRONG><a name="[199]"></a>HAL_ETH_MACErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_MACErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ETH_MspInit &rArr; ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_ETH_PMTCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_PMTCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_GetLinkState
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_ETH_SetDMAConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_SetDMAConfig &rArr; ETH_SetDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[48b]"></a>HAL_ETH_SetMACFilterConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_ETH_Start_IT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_ETH_Stop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1af]"></a>HAL_ETH_Transmit</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_ETH_Transmit &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[197]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>HAL_ETH_WakeUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WakeUpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_EnableCompensationCell))
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_IntWakeUpForGT
</UL>
<BR>[Address Reference Count : 4]<UL><LI> bsp_led.o(.text.bsp_InitLed)
<LI> bsp_uart_fifo.o(.text.bsp_InitUart)
<LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
<LI> lan8720a.o(.text.ETH_GPIO_Config)
</UL>
<P><STRONG><a name="[481]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_GetTick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; OUTLINED_FUNCTION_16 &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_LTDC_Init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.text.System_init)
</UL>
<P><STRONG><a name="[283]"></a>HAL_MPU_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[285]"></a>HAL_MPU_Enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1876 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1144 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[165]"></a>HAL_ResumeTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_ResumeTick))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[130]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_fmc_sdram.o(.text.bsp_InitExtSDRAM)
</UL>
<P><STRONG><a name="[19f]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_SuspendTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_SuspendTick))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
</UL>

<P><STRONG><a name="[26b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[495]"></a>HardFaultHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, segger_hardfaulthandler.o(.text.HardFaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3f5]"></a>IPv6_Address_Type</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, nx_ipv6_util.o(.text.IPv6_Address_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPv6_Address_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[1fc]"></a>LAN8720_GetLinkState</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lan8720a.o(.text.LAN8720_GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LAN8720_GetLinkState &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1fd]"></a>LAN8720_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lan8720a.o(.text.LAN8720_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LAN8720_Init &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[1fe]"></a>LCD_SetBackLight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_tft_lcd.o(.text.LCD_SetBackLight))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_tft_h7.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>MainTask</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, maintask.o(.text.MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = MainTask &rArr; gx_studio_display_configure &rArr; _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_start
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_initconfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_show
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGUI
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>NetXTest</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, demo_lan8720a_netx.o(.text.NetXTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = NetXTest &rArr; _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_send
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_data_retrieve
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_source_extract
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_relisten
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_unaccept
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_disconnect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_receive
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_info_get
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_accept
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_listen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_priority_change
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_icmp_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_enable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_enable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_fragment_enable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_arp_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetXPro
</UL>

<P><STRONG><a name="[277]"></a>RS485_InitTXE</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bsp_uart_fifo.o(.text.RS485_InitTXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RS485_InitTXE &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[132]"></a>RS485_ReciveNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_ReciveNew))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[134]"></a>RS485_SendBefor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_SendBefor))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[133]"></a>RS485_SendOver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.RS485_SendOver))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(.text.bsp_InitUart)
</UL>
<P><STRONG><a name="[3f9]"></a>SET_SOLICITED_NODE_MULTICAST_ADDRESS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.SET_SOLICITED_NODE_MULTICAST_ADDRESS))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[419]"></a>SET_UNSPECIFIED_ADDRESS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.SET_UNSPECIFIED_ADDRESS))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[278]"></a>STMPE811_ClearInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ClearInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_ClearInt &rArr; STMPE811_WriteReg1 &rArr; STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[279]"></a>STMPE811_InitHard</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_ts_stmpe811.o(.text.STMPE811_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STMPE811_InitHard &rArr; bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[27a]"></a>STMPE811_ReadBytes</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
</UL>

<P><STRONG><a name="[27b]"></a>STMPE811_ReadGPIO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadIO
</UL>

<P><STRONG><a name="[27d]"></a>STMPE811_ReadIO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMPE811_ReadIO &rArr; STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[27c]"></a>STMPE811_ReadReg1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadReg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadGPIO
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
</UL>

<P><STRONG><a name="[27e]"></a>STMPE811_ReadX</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMPE811_ReadX &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadReg1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[29c]"></a>STMPE811_ReadY</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.STMPE811_ReadY))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[27f]"></a>STMPE811_WriteBytes</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteReg1
</UL>

<P><STRONG><a name="[a4]"></a>STMPE811_WriteReg1</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_ts_stmpe811.o(.text.STMPE811_WriteReg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMPE811_WriteReg1 &rArr; STMPE811_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadGPIO
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_ts_stmpe811.o(.text.STMPE811_InitHard)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>SysTick_ISR</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bsp_timer.o(.text.SysTick_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = SysTick_ISR &rArr; bsp_RunPer1ms &rArr; TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[96]"></a>SystemInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>System_init</STRONG> (Thumb, 580 bytes, Stack size 136 bytes, bsp.o(.text.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[289]"></a>TOUCH_CapScan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_CapScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[28a]"></a>TOUCH_InitHard</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bsp_ts_touch.o(.text.TOUCH_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TOUCH_InitHard &rArr; bsp_DetectLcdType &rArr; STMPE811_ReadIO &rArr; STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SaveParam
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_InitHard
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_InitHard
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_IntWakeUpForGT
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[28b]"></a>TOUCH_IntWakeUpForGT</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, bsp_ts_touch.o(.text.TOUCH_IntWakeUpForGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TOUCH_IntWakeUpForGT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[29f]"></a>TOUCH_MoveValid</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_MoveValid))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[186]"></a>TOUCH_PenInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_PenInt))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[187]"></a>TOUCH_PutKey</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bsp_ts_touch.o(.text.TOUCH_PutKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_event_send
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_event_fold
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>

<P><STRONG><a name="[298]"></a>TOUCH_Scan</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.TOUCH_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TOUCH_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ClearInt
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadY
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadX
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Timer1ms
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Timer1ms
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Timer1ms
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MoveValid
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DataFilter
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PressValid
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[26a]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
</UL>

<P><STRONG><a name="[1fb]"></a>UART_CheckIdleState</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; OUTLINED_FUNCTION_22 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[21d]"></a>UART_SetConfig</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[269]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a4]"></a>_gx_animation_complete</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, gx_animation_complete.o(.text._gx_animation_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _gx_animation_complete &rArr; _gx_widget_delete &rArr; _gx_widget_delete_helper &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_animation_free
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_screen_stack_push
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete_event_send
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[2ad]"></a>_gx_animation_complete_event_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, gx_animation_complete.o(.text._gx_animation_complete_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_animation_complete_event_send &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[2b1]"></a>_gx_animation_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_animation_create.o(.text._gx_animation_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_animation_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[2a5]"></a>_gx_animation_stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gx_animation_stop.o(.text._gx_animation_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _gx_animation_stop &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_deactivate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[2b5]"></a>_gx_animation_update</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, gx_animation_update.o(.text._gx_animation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _gx_animation_update &rArr; _gx_animation_complete &rArr; _gx_widget_delete &rArr; _gx_widget_delete_helper &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_alpha_set
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_offset_set
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[2b9]"></a>_gx_brush_default</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gx_brush_default.o(.text._gx_brush_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_brush_default
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_default
</UL>

<P><STRONG><a name="[2e3]"></a>_gx_brush_define</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_brush_define.o(.text._gx_brush_define))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_define
</UL>

<P><STRONG><a name="[2ba]"></a>_gx_button_background_draw</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gx_button_background_draw.o(.text._gx_button_background_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _gx_button_background_draw &rArr; _gx_widget_border_style_set &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_draw
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_draw
</UL>

<P><STRONG><a name="[2bd]"></a>_gx_button_create</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gx_button_create.o(.text._gx_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_add
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_create
</UL>

<P><STRONG><a name="[a7]"></a>_gx_button_deselect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gx_button_deselect.o(.text._gx_button_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gx_button_deselect &rArr; _gx_widget_event_generate &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[a9]"></a>_gx_button_draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_button_draw.o(.text._gx_button_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _gx_button_draw &rArr; _gx_button_background_draw &rArr; _gx_widget_border_style_set &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[aa]"></a>_gx_button_event_process</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, gx_button_event_process.o(.text._gx_button_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _gx_button_event_process &rArr; _gx_widget_event_process &rArr; _gx_widget_event_generate &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_to_parent
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[a8]"></a>_gx_button_select</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, gx_button_select.o(.text._gx_button_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _gx_button_select &rArr; _gx_widget_front_move &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_siblings_deselect
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[2c8]"></a>_gx_button_siblings_deselect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gx_button_siblings_deselect.o(.text._gx_button_siblings_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_button_siblings_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
</UL>

<P><STRONG><a name="[2b6]"></a>_gx_canvas_alpha_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gx_canvas_alpha_set.o(.text._gx_canvas_alpha_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_canvas_alpha_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[2cb]"></a>_gx_canvas_block_move</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gx_canvas_block_move.o(.text._gx_canvas_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_canvas_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_inside_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[2cd]"></a>_gx_canvas_composite_create</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, gx_canvas_composite_create.o(.text._gx_canvas_composite_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_canvas_composite_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[2d0]"></a>_gx_canvas_create</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gx_canvas_create.o(.text._gx_canvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _gx_canvas_create &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_canvas_create
</UL>

<P><STRONG><a name="[2ca]"></a>_gx_canvas_dirty_mark</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gx_canvas_dirty_mark.o(.text._gx_canvas_dirty_mark))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_alpha_set
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_offset_set
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
</UL>

<P><STRONG><a name="[362]"></a>_gx_canvas_drawing_complete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gx_canvas_drawing_complete.o(.text._gx_canvas_drawing_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_canvas_drawing_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[2d2]"></a>_gx_canvas_drawing_initiate</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, gx_canvas_drawing_initiate.o(.text._gx_canvas_drawing_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _gx_canvas_drawing_initiate &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_default
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[2d6]"></a>_gx_canvas_glyphs_draw</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, gx_canvas_glyphs_draw.o(.text._gx_canvas_glyphs_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_text_draw_ext
</UL>

<P><STRONG><a name="[2ac]"></a>_gx_canvas_hide</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gx_canvas_hide.o(.text._gx_canvas_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_canvas_hide
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[ab]"></a>_gx_canvas_line_draw</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, gx_canvas_line_draw.o(.text._gx_canvas_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_polygon_draw
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_monochrome_driver_disabled_button_line_draw
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_draw)
<LI> gx_widget_border_draw.o(.text._gx_widget_border_draw)
</UL>
<P><STRONG><a name="[2b8]"></a>_gx_canvas_offset_set</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gx_canvas_offset_set.o(.text._gx_canvas_offset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_canvas_offset_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_shift
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[106]"></a>_gx_canvas_pixel_draw</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gx_canvas_pixel_draw.o(.text._gx_canvas_pixel_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_canvas_pixel_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_widget_border_draw.o(.text._gx_widget_border_draw)
</UL>
<P><STRONG><a name="[2d9]"></a>_gx_canvas_pixelmap_draw</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, gx_canvas_pixelmap_draw.o(.text._gx_canvas_pixelmap_draw), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_tile
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[2da]"></a>_gx_canvas_pixelmap_tile</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gx_canvas_pixelmap_tile.o(.text._gx_canvas_pixelmap_tile), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[2db]"></a>_gx_canvas_rectangle_draw</STRONG> (Thumb, 400 bytes, Stack size 64 bytes, gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gx_canvas_rectangle_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[2de]"></a>_gx_canvas_shift</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_canvas_shift.o(.text._gx_canvas_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_canvas_shift &rArr; _gx_canvas_offset_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_offset_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_event_process
</UL>

<P><STRONG><a name="[2df]"></a>_gx_canvas_text_draw_ext</STRONG> (Thumb, 316 bytes, Stack size 80 bytes, gx_canvas_text_draw.o(.text._gx_canvas_text_draw_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_string_width_get_ext
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_glyphs_draw
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
</UL>

<P><STRONG><a name="[2d5]"></a>_gx_context_brush_default</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gx_context_brush_default.o(.text._gx_context_brush_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_context_brush_default &rArr; _gx_brush_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_brush_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
</UL>

<P><STRONG><a name="[2e1]"></a>_gx_context_brush_define</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gx_context_brush_define.o(.text._gx_context_brush_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_context_brush_define
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_brush_define
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[3b0]"></a>_gx_context_brush_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_context_brush_get.o(.text._gx_context_brush_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
</UL>

<P><STRONG><a name="[355]"></a>_gx_context_brush_width_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_context_brush_width_set.o(.text._gx_context_brush_width_set))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_monochrome_driver_disabled_button_line_draw
</UL>

<P><STRONG><a name="[2e2]"></a>_gx_context_color_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gx_context_color_get.o(.text._gx_context_color_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_fill_color_set
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_define
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_line_color_set
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_monochrome_driver_disabled_button_line_draw
</UL>

<P><STRONG><a name="[2e4]"></a>_gx_context_fill_color_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gx_context_fill_color_set.o(.text._gx_context_fill_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_context_fill_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_context_fill_set
</UL>

<P><STRONG><a name="[2e6]"></a>_gx_context_font_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gx_context_font_get.o(.text._gx_context_font_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_font_set
</UL>

<P><STRONG><a name="[2e5]"></a>_gx_context_font_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_context_font_set.o(.text._gx_context_font_set))
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_font_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
</UL>

<P><STRONG><a name="[2e7]"></a>_gx_context_line_color_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gx_context_line_color_set.o(.text._gx_context_line_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_context_line_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[3b2]"></a>_gx_context_pixelmap_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gx_context_pixelmap_get.o(.text._gx_context_pixelmap_get), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[354]"></a>_gx_context_raw_line_color_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_context_raw_line_color_set.o(.text._gx_context_raw_line_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_context_raw_line_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_monochrome_driver_disabled_button_line_draw
</UL>

<P><STRONG><a name="[2e8]"></a>_gx_context_string_get_ext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_context_string_get.o(.text._gx_context_string_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_context_string_get_ext &rArr; _gx_display_string_get_ext &rArr; _gx_display_string_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_string_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_id_draw
</UL>

<P><STRONG><a name="[2ea]"></a>_gx_display_active_language_set</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gx_display_active_language_set.o(.text._gx_display_active_language_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_display_active_language_set &rArr; _gx_system_all_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_canvas_dirty
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_active_language_set
</UL>

<P><STRONG><a name="[2ec]"></a>_gx_display_canvas_dirty</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gx_display_canvas_dirty.o(.text._gx_display_canvas_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_color_table_set
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_pixelmap_table_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_font_table_set
</UL>

<P><STRONG><a name="[2ed]"></a>_gx_display_color_table_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gx_display_color_table_set.o(.text._gx_display_color_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gx_display_color_table_set &rArr; _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_color_table_set
</UL>

<P><STRONG><a name="[2ee]"></a>_gx_display_create</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gx_display_create.o(.text._gx_display_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_create
</UL>

<P><STRONG><a name="[b5]"></a>_gx_display_driver_16bpp_block_move</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, gx_display_driver_16bpp_block_move.o(.text._gx_display_driver_16bpp_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_16bpp_block_move &rArr; OUTLINED_FUNCTION_3 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[ae]"></a>_gx_display_driver_16bpp_canvas_copy</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, gx_display_driver_16bpp_canvas_copy.o(.text._gx_display_driver_16bpp_canvas_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _gx_display_driver_16bpp_canvas_copy &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d6]"></a>_gx_display_driver_16bpp_glyph_1bit_draw</STRONG> (Thumb, 608 bytes, Stack size 88 bytes, gx_display_driver_565rgb_glyph_1bit_draw.o(.text._gx_display_driver_16bpp_glyph_1bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_16bpp_glyph_1bit_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b1]"></a>_gx_display_driver_16bpp_horizontal_line_draw</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, gx_display_driver_16bpp_horizontal_line_draw.o(.text._gx_display_driver_16bpp_horizontal_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_16bpp_horizontal_line_draw &rArr; _gx_display_driver_horizontal_line_alpha_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_horizontal_line_alpha_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[af]"></a>_gx_display_driver_16bpp_horizontal_pattern_line_draw</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, gx_display_driver_16bpp_horizontal_pattern_line_draw.o(.text._gx_display_driver_16bpp_horizontal_pattern_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_display_driver_16bpp_horizontal_pattern_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b6]"></a>_gx_display_driver_16bpp_pixel_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gx_display_driver_16bpp_pixel_write.o(.text._gx_display_driver_16bpp_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_display_driver_16bpp_pixel_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b9]"></a>_gx_display_driver_16bpp_pixelmap_rotate</STRONG> (Thumb, 2164 bytes, Stack size 144 bytes, gx_display_driver_16bpp_pixelmap_rotate.o(.text._gx_display_driver_16bpp_pixelmap_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gx_display_driver_16bpp_pixelmap_rotate &rArr; _gx_display_driver_16bpp_pixelmap_simple_alpha_rotate
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_simple_alpha_rotate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_simple_rotate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[2f9]"></a>_gx_display_driver_16bpp_pixelmap_simple_alpha_rotate</STRONG> (Thumb, 468 bytes, Stack size 72 bytes, gx_display_driver_16bpp_pixelmap_rotate.o(.text._gx_display_driver_16bpp_pixelmap_simple_alpha_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_display_driver_16bpp_pixelmap_simple_alpha_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_rotate
</UL>

<P><STRONG><a name="[2f8]"></a>_gx_display_driver_16bpp_pixelmap_simple_rotate</STRONG> (Thumb, 444 bytes, Stack size 36 bytes, gx_display_driver_16bpp_pixelmap_rotate.o(.text._gx_display_driver_16bpp_pixelmap_simple_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _gx_display_driver_16bpp_pixelmap_simple_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_rotate
</UL>

<P><STRONG><a name="[b3]"></a>_gx_display_driver_16bpp_row_pitch_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_16bpp_row_pitch_get.o(.text._gx_display_driver_16bpp_row_pitch_get))
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b2]"></a>_gx_display_driver_16bpp_simple_line_draw</STRONG> (Thumb, 1354 bytes, Stack size 104 bytes, gx_display_driver_16bpp_simple_line_draw.o(.text._gx_display_driver_16bpp_simple_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _gx_display_driver_16bpp_simple_line_draw &rArr; _gx_display_driver_simple_line_alpha_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_simple_line_alpha_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b0]"></a>_gx_display_driver_16bpp_vertical_line_draw</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, gx_display_driver_16bpp_vertical_line_draw.o(.text._gx_display_driver_16bpp_vertical_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_16bpp_vertical_line_draw &rArr; _gx_display_driver_vertical_line_alpha_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_vertical_line_alpha_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b7]"></a>_gx_display_driver_16bpp_vertical_pattern_line_draw</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, gx_display_driver_16bpp_vertical_pattern_line_draw.o(.text._gx_display_driver_16bpp_vertical_pattern_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_display_driver_16bpp_vertical_pattern_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d1]"></a>_gx_display_driver_565rgb_canvas_blend</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, gx_display_driver_565rgb_canvas_blend.o(.text._gx_display_driver_565rgb_canvas_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gx_display_driver_565rgb_canvas_blend &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b8]"></a>_gx_display_driver_565rgb_horizontal_pixelmap_line_draw</STRONG> (Thumb, 1398 bytes, Stack size 64 bytes, gx_display_driver_565rgb_horizontal_pixelmap_line_draw.o(.text._gx_display_driver_565rgb_horizontal_pixelmap_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_565rgb_horizontal_pixelmap_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d7]"></a>_gx_display_driver_565rgb_jpeg_draw</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gx_display_driver_565rgb_jpeg_draw.o(.text._gx_display_driver_565rgb_jpeg_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = _gx_display_driver_565rgb_jpeg_draw &rArr; _gx_image_reader_jpeg_mcu_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_mcu_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[b4]"></a>_gx_display_driver_565rgb_native_color_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_display_driver_565rgb_native_color_get.o(.text._gx_display_driver_565rgb_native_color_get))
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d2]"></a>_gx_display_driver_565rgb_pixel_blend</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gx_display_driver_565rgb_pixel_blend.o(.text._gx_display_driver_565rgb_pixel_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d3]"></a>_gx_display_driver_565rgb_pixelmap_blend</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text._gx_display_driver_565rgb_pixelmap_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_blend &rArr; _gx_display_driver_565rgb_pixelmap_alpha_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixel_blend
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_compressed_blend
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_alpha_blend
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_raw_blend
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_chromeart_pixelmap_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[ba]"></a>_gx_display_driver_565rgb_pixelmap_draw</STRONG> (Thumb, 2080 bytes, Stack size 64 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text._gx_display_driver_565rgb_pixelmap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_draw &rArr; _gx_display_driver_565rgb_pixelmap_blend &rArr; _gx_display_driver_565rgb_pixelmap_alpha_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_compressed_write
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_compressed_alpha_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_alpha_write
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_raw_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixel_blend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixel_write
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_chromeart_pixelmap_draw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_png_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d8]"></a>_gx_display_driver_565rgb_png_draw</STRONG> (Thumb, 72 bytes, Stack size 128 bytes, gx_display_driver_565rgb_png_draw.o(.text._gx_display_driver_565rgb_png_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = _gx_display_driver_565rgb_png_draw &rArr; _gx_image_reader_start &rArr; _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[494]"></a>_gx_display_driver_565rgb_setup</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_driver_565rgb_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[30d]"></a>_gx_display_driver_arc_clipping_get</STRONG> (Thumb, 858 bytes, Stack size 48 bytes, gx_display_driver_arc_clipping_get.o(.text._gx_display_driver_arc_clipping_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[c6]"></a>_gx_display_driver_generic_aliased_arc_draw</STRONG> (Thumb, 636 bytes, Stack size 144 bytes, gx_display_driver_generic_aliased_arc_draw.o(.text._gx_display_driver_generic_aliased_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _gx_display_driver_generic_aliased_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c1]"></a>_gx_display_driver_generic_aliased_circle_draw</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, gx_display_driver_generic_aliased_circle_draw.o(.text._gx_display_driver_generic_aliased_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_generic_aliased_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c2]"></a>_gx_display_driver_generic_aliased_ellipse_draw</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, gx_display_driver_generic_aliased_ellipse_draw.o(.text._gx_display_driver_generic_aliased_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_generic_aliased_ellipse_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[227]"></a>_gx_display_driver_generic_aliased_filled_circle_draw</STRONG> (Thumb, 736 bytes, Stack size 120 bytes, gx_display_driver_generic_aliased_filled_circle_draw.o(.text._gx_display_driver_generic_aliased_filled_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_display_driver_generic_aliased_filled_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[db]"></a>_gx_display_driver_generic_aliased_fixed_point_line_draw</STRONG> (Thumb, 1288 bytes, Stack size 104 bytes, gx_display_driver_generic_aliased_fixed_point_line_draw.o(.text._gx_display_driver_generic_aliased_fixed_point_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_generic_wide_line_points_calculate.o(.text._gx_display_driver_generic_wide_line_points_calculate)
</UL>
<P><STRONG><a name="[bf]"></a>_gx_display_driver_generic_aliased_line_draw</STRONG> (Thumb, 1470 bytes, Stack size 96 bytes, gx_display_driver_generic_aliased_line_draw.o(.text._gx_display_driver_generic_aliased_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_generic_aliased_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[ce]"></a>_gx_display_driver_generic_aliased_wide_arc_draw</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_aliased_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _gx_display_driver_generic_aliased_wide_arc_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_display_driver_generic_simple_aliased_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[cb]"></a>_gx_display_driver_generic_aliased_wide_circle_draw</STRONG> (Thumb, 788 bytes, Stack size 112 bytes, gx_display_driver_generic_aliased_wide_circle_draw.o(.text._gx_display_driver_generic_aliased_wide_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gx_display_driver_generic_aliased_wide_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[cc]"></a>_gx_display_driver_generic_aliased_wide_ellipse_draw</STRONG> (Thumb, 988 bytes, Stack size 144 bytes, gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text._gx_display_driver_generic_aliased_wide_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gx_display_driver_generic_aliased_wide_ellipse_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c0]"></a>_gx_display_driver_generic_aliased_wide_line_draw</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, gx_display_driver_generic_aliased_wide_line_draw.o(.text._gx_display_driver_generic_aliased_wide_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gx_display_driver_generic_aliased_wide_line_draw &rArr; _gx_display_driver_generic_aliased_filled_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_fill
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[bc]"></a>_gx_display_driver_generic_alphamap_draw</STRONG> (Thumb, 746 bytes, Stack size 64 bytes, gx_display_driver_generic_alphamap_draw.o(.text._gx_display_driver_generic_alphamap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_generic_alphamap_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c7]"></a>_gx_display_driver_generic_arc_draw</STRONG> (Thumb, 576 bytes, Stack size 128 bytes, gx_display_driver_generic_arc_draw.o(.text._gx_display_driver_generic_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gx_display_driver_generic_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c8]"></a>_gx_display_driver_generic_arc_fill</STRONG> (Thumb, 1456 bytes, Stack size 200 bytes, gx_display_driver_generic_arc_fill.o(.text._gx_display_driver_generic_arc_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _gx_display_driver_generic_arc_fill &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c3]"></a>_gx_display_driver_generic_circle_draw</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, gx_display_driver_generic_circle_draw.o(.text._gx_display_driver_generic_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_generic_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c4]"></a>_gx_display_driver_generic_circle_fill</STRONG> (Thumb, 572 bytes, Stack size 112 bytes, gx_display_driver_generic_circle_fill.o(.text._gx_display_driver_generic_circle_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gx_display_driver_generic_circle_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c9]"></a>_gx_display_driver_generic_ellipse_draw</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, gx_display_driver_generic_ellipse_draw.o(.text._gx_display_driver_generic_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_generic_ellipse_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[ca]"></a>_gx_display_driver_generic_ellipse_fill</STRONG> (Thumb, 708 bytes, Stack size 128 bytes, gx_display_driver_generic_ellipse_fill.o(.text._gx_display_driver_generic_ellipse_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gx_display_driver_generic_ellipse_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[22c]"></a>_gx_display_driver_generic_filled_circle_draw</STRONG> (Thumb, 500 bytes, Stack size 88 bytes, gx_display_driver_generic_filled_circle_draw.o(.text._gx_display_driver_generic_filled_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_generic_filled_circle_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[d5]"></a>_gx_display_driver_generic_glyph_4bit_draw</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, gx_display_driver_generic_glyph_4bpp_draw.o(.text._gx_display_driver_generic_glyph_4bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_generic_glyph_4bit_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d4]"></a>_gx_display_driver_generic_glyph_8bit_draw</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, gx_display_driver_generic_glyph_8bpp_draw.o(.text._gx_display_driver_generic_glyph_8bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_display_driver_generic_glyph_8bit_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[c5]"></a>_gx_display_driver_generic_pie_fill</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, gx_display_driver_generic_pie_fill.o(.text._gx_display_driver_generic_pie_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _gx_display_driver_generic_pie_fill &rArr; _gx_display_driver_generic_simple_pie_fill &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[bd]"></a>_gx_display_driver_generic_polygon_draw</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gx_display_driver_generic_polygon_draw.o(.text._gx_display_driver_generic_polygon_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _gx_display_driver_generic_polygon_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[be]"></a>_gx_display_driver_generic_polygon_fill</STRONG> (Thumb, 1116 bytes, Stack size 144 bytes, gx_display_driver_generic_polygon_fill.o(.text._gx_display_driver_generic_polygon_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _gx_display_driver_generic_polygon_fill &rArr; OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[323]"></a>_gx_display_driver_generic_simple_pie_fill</STRONG> (Thumb, 1404 bytes, Stack size 192 bytes, gx_display_driver_generic_simple_pie_fill.o(.text._gx_display_driver_generic_simple_pie_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _gx_display_driver_generic_simple_pie_fill &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_pie_fill
</UL>

<P><STRONG><a name="[bb]"></a>_gx_display_driver_generic_simple_wide_line_draw</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, gx_display_driver_generic_simple_wide_line_draw.o(.text._gx_display_driver_generic_simple_wide_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gx_display_driver_generic_simple_wide_line_draw &rArr; _gx_display_driver_generic_wide_line_points_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_filled_circle_draw
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_fill
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[d0]"></a>_gx_display_driver_generic_wide_arc_draw</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _gx_display_driver_generic_wide_arc_draw &rArr; OUTLINED_FUNCTION_1 &rArr; _gx_display_driver_generic_simple_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[cd]"></a>_gx_display_driver_generic_wide_circle_draw</STRONG> (Thumb, 528 bytes, Stack size 80 bytes, gx_display_driver_generic_wide_circle_draw.o(.text._gx_display_driver_generic_wide_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_generic_wide_circle_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[cf]"></a>_gx_display_driver_generic_wide_ellipse_draw</STRONG> (Thumb, 864 bytes, Stack size 88 bytes, gx_display_driver_generic_wide_ellipse_draw.o(.text._gx_display_driver_generic_wide_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_generic_wide_ellipse_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_setup.o(.text._gx_display_driver_565rgb_setup)
</UL>
<P><STRONG><a name="[316]"></a>_gx_display_driver_generic_wide_line_fill</STRONG> (Thumb, 812 bytes, Stack size 96 bytes, gx_display_driver_generic_wide_line_fill.o(.text._gx_display_driver_generic_wide_line_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_generic_wide_line_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
</UL>

<P><STRONG><a name="[315]"></a>_gx_display_driver_generic_wide_line_points_calculate</STRONG> (Thumb, 392 bytes, Stack size 104 bytes, gx_display_driver_generic_wide_line_points_calculate.o(.text._gx_display_driver_generic_wide_line_points_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_generic_wide_line_points_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
</UL>

<P><STRONG><a name="[2f3]"></a>_gx_display_driver_horizontal_line_alpha_draw</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, gx_display_driver_horizontal_line_alpha_draw.o(.text._gx_display_driver_horizontal_line_alpha_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_horizontal_line_alpha_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_horizontal_line_draw
</UL>

<P><STRONG><a name="[2fa]"></a>_gx_display_driver_simple_line_alpha_draw</STRONG> (Thumb, 1268 bytes, Stack size 96 bytes, gx_display_driver_simple_line_alpha_draw.o(.text._gx_display_driver_simple_line_alpha_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _gx_display_driver_simple_line_alpha_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_simple_line_draw
</UL>

<P><STRONG><a name="[2fb]"></a>_gx_display_driver_vertical_line_alpha_draw</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, gx_display_driver_vertical_line_alpha_draw.o(.text._gx_display_driver_vertical_line_alpha_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_vertical_line_alpha_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_vertical_line_draw
</UL>

<P><STRONG><a name="[327]"></a>_gx_display_font_table_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gx_display_font_table_set.o(.text._gx_display_font_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gx_display_font_table_set &rArr; _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_font_table_set
</UL>

<P><STRONG><a name="[328]"></a>_gx_display_language_table_set_ext</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, gx_display_language_table_set.o(.text._gx_display_language_table_set_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_display_language_table_set_ext &rArr; _gx_system_all_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_canvas_dirty
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_language_table_set_ext
</UL>

<P><STRONG><a name="[329]"></a>_gx_display_pixelmap_table_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gx_display_pixelmap_table_set.o(.text._gx_display_pixelmap_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gx_display_pixelmap_table_set &rArr; _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_pixelmap_table_set
</UL>

<P><STRONG><a name="[32a]"></a>_gx_display_string_get</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gx_display_string_get.o(.text._gx_display_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_display_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_string_get_ext
</UL>

<P><STRONG><a name="[2e9]"></a>_gx_display_string_get_ext</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gx_display_string_get.o(.text._gx_display_string_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_display_string_get_ext &rArr; _gx_display_string_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_string_length_check
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_string_get_ext
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_string_get_ext
</UL>

<P><STRONG><a name="[335]"></a>_gx_image_reader_colorspace_convert</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_image_reader_colorspace_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[30b]"></a>_gx_image_reader_create</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gx_image_reader_create.o(.text._gx_image_reader_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_png_draw
</UL>

<P><STRONG><a name="[336]"></a>_gx_image_reader_image_decode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gx_image_reader_image_decode.o(.text._gx_image_reader_image_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[338]"></a>_gx_image_reader_jpeg_decode</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode_blocks
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_image_decode
</UL>

<P><STRONG><a name="[2ff]"></a>_gx_image_reader_jpeg_mcu_decode</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_mcu_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = _gx_image_reader_jpeg_mcu_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode_blocks
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_jpeg_draw
</UL>

<P><STRONG><a name="[334]"></a>_gx_image_reader_nearest_palette_color_get</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, gx_image_reader_nearest_palette_color_get.o(.text._gx_image_reader_nearest_palette_color_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _gx_image_reader_nearest_palette_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_palette_write
</UL>

<P><STRONG><a name="[22e]"></a>_gx_image_reader_pixel_read_callback_set</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_pixel_read_callback_set
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[342]"></a>_gx_image_reader_pixel_write_callback_set</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_pixel_write_callback_set
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[337]"></a>_gx_image_reader_png_decode</STRONG> (Thumb, 2912 bytes, Stack size 304 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _gx_image_reader_png_decode &rArr; _gx_image_reader_png_huffcode_decode &rArr; _gx_image_reader_png_bits_get &rArr; _gx_image_reader_png_4bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_dynamic_huffman_code_find
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_chunk_type_read
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_crc_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_4bytes_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_image_decode
</UL>

<P><STRONG><a name="[252]"></a>_gx_image_reader_rgb2gray</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gx_image_reader_start.o(.text._gx_image_reader_rgb2gray))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_rgb2gray
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[34d]"></a>_gx_image_reader_rle_encode</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_image_reader_rle_encode &rArr; _gx_image_reader_rle_one_row_encode &rArr; _gx_image_reader_rle_count_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[34f]"></a>_gx_image_reader_rle_encode_size_get</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_encode_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_image_reader_rle_encode_size_get &rArr; _gx_image_reader_rle_one_row_encode &rArr; _gx_image_reader_rle_count_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[30c]"></a>_gx_image_reader_start</STRONG> (Thumb, 792 bytes, Stack size 112 bytes, gx_image_reader_start.o(.text._gx_image_reader_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = _gx_image_reader_start &rArr; _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode_size_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_write_callback_set
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_image_decode
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_colorspace_convert
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_png_draw
</UL>

<P><STRONG><a name="[352]"></a>_gx_menu_insert</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gx_menu_insert.o(.text._gx_menu_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _gx_menu_insert &rArr; _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_menu_insert
</UL>

<P><STRONG><a name="[353]"></a>_gx_monochrome_driver_disabled_button_line_draw</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gx_monochrome_driver_disabled_button_line_draw.o(.text._gx_monochrome_driver_disabled_button_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _gx_monochrome_driver_disabled_button_line_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_width_set
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_raw_line_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_draw
</UL>

<P><STRONG><a name="[356]"></a>_gx_prompt_create</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gx_prompt_create.o(.text._gx_prompt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _gx_prompt_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_prompt_create
</UL>

<P><STRONG><a name="[102]"></a>_gx_prompt_draw</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_prompt_draw.o(.text._gx_prompt_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _gx_prompt_draw &rArr; _gx_prompt_text_draw &rArr; _gx_widget_text_draw_ext &rArr; _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_background_draw
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_text_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_prompt_create.o(.text._gx_prompt_create)
</UL>
<P><STRONG><a name="[359]"></a>_gx_prompt_font_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_prompt_font_set.o(.text._gx_prompt_font_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_prompt_font_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_prompt_font_set
</UL>

<P><STRONG><a name="[35a]"></a>_gx_prompt_text_color_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gx_prompt_text_color_set.o(.text._gx_prompt_text_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_prompt_text_color_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_prompt_text_color_set
</UL>

<P><STRONG><a name="[358]"></a>_gx_prompt_text_draw</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gx_prompt_text_draw.o(.text._gx_prompt_text_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _gx_prompt_text_draw &rArr; _gx_widget_text_draw_ext &rArr; _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_draw
</UL>

<P><STRONG><a name="[101]"></a>_gx_prompt_text_get_ext</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gx_prompt_text_get.o(.text._gx_prompt_text_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_prompt_text_get_ext &rArr; _gx_widget_string_get_ext &rArr; _gx_display_string_get_ext &rArr; _gx_display_string_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_private_string_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_string_get_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_prompt_create.o(.text._gx_prompt_create)
</UL>
<P><STRONG><a name="[2eb]"></a>_gx_system_all_canvas_dirty</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gx_system_all_canvas_dirty.o(.text._gx_system_all_canvas_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _gx_system_all_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_active_language_set
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
</UL>

<P><STRONG><a name="[35e]"></a>_gx_system_all_views_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gx_system_all_views_free.o(.text._gx_system_all_views_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_all_views_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_free
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_update
</UL>

<P><STRONG><a name="[2ae]"></a>_gx_system_animation_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gx_system_animation_free.o(.text._gx_system_animation_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _gx_system_animation_free &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[2ab]"></a>_gx_system_canvas_refresh</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, gx_system_canvas_refresh.o(.text._gx_system_canvas_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _gx_system_canvas_refresh &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_composite_create
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_complete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[364]"></a>_gx_system_dirty_entry_shift</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gx_system_dirty_partial_add.o(.text._gx_system_dirty_entry_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_system_dirty_entry_shift &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift_helper
</UL>

<P><STRONG><a name="[3a4]"></a>_gx_system_dirty_list_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gx_system_dirty_list_remove.o(.text._gx_system_dirty_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_dirty_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>

<P><STRONG><a name="[361]"></a>_gx_system_dirty_list_trim</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, gx_system_dirty_list_trim.o(.text._gx_system_dirty_list_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _gx_system_dirty_list_trim &rArr; OUTLINED_FUNCTION_0 &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[2b7]"></a>_gx_system_dirty_mark</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_system_dirty_mark.o(.text._gx_system_dirty_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_deselect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_canvas_dirty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_fill_color_set
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_text_color_set
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_font_set
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_text_color_set
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_font_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_wallpaper_set
</UL>

<P><STRONG><a name="[233]"></a>_gx_system_dirty_partial_add</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, gx_system_dirty_partial_add.o(.text._gx_system_dirty_partial_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
</UL>

<P><STRONG><a name="[2d3]"></a>_gx_system_error_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_system_error_process.o(.text._gx_system_error_process))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_views_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_free_view_get
</UL>

<P><STRONG><a name="[365]"></a>_gx_system_event_dispatch</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, gx_system_event_dispatch.o(.text._gx_system_event_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_system_event_dispatch &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_widget_find
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_root_find
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[369]"></a>_gx_system_event_fold</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gx_system_event_fold.o(.text._gx_system_event_fold))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_update
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_event_fold
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_expiration
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
</UL>

<P><STRONG><a name="[36b]"></a>_gx_system_event_remove</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, gx_system_event_remove.o(.text._gx_system_event_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_system_event_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>

<P><STRONG><a name="[2b0]"></a>_gx_system_event_send</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gx_system_event_send.o(.text._gx_system_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_flick_test
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_update
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete_event_send
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[368]"></a>_gx_system_focus_claim</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, gx_system_focus_claim.o(.text._gx_system_focus_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_previous
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_next
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_focus_assign
</UL>

<P><STRONG><a name="[370]"></a>_gx_system_free_view_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_system_free_view_get.o(.text._gx_system_free_view_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_system_free_view_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_add
</UL>

<P><STRONG><a name="[371]"></a>_gx_system_initialize</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, gx_system_initialize.o(.text._gx_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = _gx_system_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_create
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_string_length_check
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_create
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_ltoa
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_initialize
</UL>

<P><STRONG><a name="[2c5]"></a>_gx_system_input_capture</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gx_system_input_capture.o(.text._gx_system_input_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _gx_system_input_capture &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_add
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
</UL>

<P><STRONG><a name="[2c4]"></a>_gx_system_input_release</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gx_system_input_release.o(.text._gx_system_input_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _gx_system_input_release &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[2b2]"></a>_gx_system_lock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gx_system_lock.o(.text._gx_system_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_animation_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[3c6]"></a>_gx_system_memory_allocator_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_system_memory_allocator_set.o(.text._gx_system_memory_allocator_set))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_memory_allocator_set
</UL>

<P><STRONG><a name="[36f]"></a>_gx_system_pen_flick_test</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gx_system_pen_flick_test.o(.text._gx_system_pen_flick_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>

<P><STRONG><a name="[36d]"></a>_gx_system_pen_speed_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gx_system_pen_speed_init.o(.text._gx_system_pen_speed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_system_pen_speed_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>

<P><STRONG><a name="[36a]"></a>_gx_system_pen_speed_update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gx_system_pen_speed_update.o(.text._gx_system_pen_speed_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_system_pen_speed_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
</UL>

<P><STRONG><a name="[3a3]"></a>_gx_system_private_string_delete</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, gx_system_private_string.o(.text._gx_system_private_string_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_private_string_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>

<P><STRONG><a name="[35d]"></a>_gx_system_private_string_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_system_private_string.o(.text._gx_system_private_string_get))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_text_get_ext
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_text_draw
</UL>

<P><STRONG><a name="[37a]"></a>_gx_system_root_view_add</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gx_system_root_view_add.o(.text._gx_system_root_view_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_system_root_view_add &rArr; _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_split
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_add
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_update
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_split
</UL>

<P><STRONG><a name="[2aa]"></a>_gx_system_screen_stack_push</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gx_system_screen_stack_push.o(.text._gx_system_screen_stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_system_screen_stack_push &rArr; _gx_widget_detach &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[37d]"></a>_gx_system_scroll_appearance_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gx_system_scroll_appearance_set.o(.text._gx_system_scroll_appearance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_scroll_appearance_set &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_scroll_appearance_set
</UL>

<P><STRONG><a name="[37e]"></a>_gx_system_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_system_start.o(.text._gx_system_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _gx_system_start &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_resume
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_start
</UL>

<P><STRONG><a name="[2e0]"></a>_gx_system_string_width_get_ext</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, gx_system_string_width_get.o(.text._gx_system_string_width_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_system_string_width_get_ext &rArr; OUTLINED_FUNCTION_0 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_text_draw_ext
</UL>

<P><STRONG><a name="[104]"></a>_gx_system_thread_entry</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, gx_system_thread_entry.o(.text._gx_system_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _gx_system_thread_entry &rArr; _gx_system_timer_update &rArr; _gx_animation_update &rArr; _gx_animation_complete &rArr; _gx_widget_delete &rArr; _gx_widget_delete_helper &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_system_initialize.o(.text._gx_system_initialize)
</UL>
<P><STRONG><a name="[103]"></a>_gx_system_timer_expiration</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, gx_system_timer_expiration.o(.text._gx_system_timer_expiration))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gx_system_timer_expiration &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_deactivate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_system_initialize.o(.text._gx_system_initialize)
</UL>
<P><STRONG><a name="[2c9]"></a>_gx_system_timer_start</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gx_system_timer_start.o(.text._gx_system_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_system_timer_start &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_info_get
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_activate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
</UL>

<P><STRONG><a name="[2c1]"></a>_gx_system_timer_stop</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gx_system_timer_stop.o(.text._gx_system_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_system_timer_stop &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_deactivate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_deselect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>

<P><STRONG><a name="[381]"></a>_gx_system_timer_update</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, gx_system_timer_update.o(.text._gx_system_timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _gx_system_timer_update &rArr; _gx_animation_update &rArr; _gx_animation_complete &rArr; _gx_widget_delete &rArr; _gx_widget_delete_helper &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[366]"></a>_gx_system_top_root_find</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gx_system_top_root_find.o(.text._gx_system_top_root_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_system_top_root_find
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
</UL>

<P><STRONG><a name="[367]"></a>_gx_system_top_widget_find</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gx_system_top_widget_find.o(.text._gx_system_top_widget_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_system_top_widget_find
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
</UL>

<P><STRONG><a name="[2b4]"></a>_gx_system_unlock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gx_system_unlock.o(.text._gx_system_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_animation_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[37b]"></a>_gx_system_view_add</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gx_system_view_add.o(.text._gx_system_view_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _gx_system_view_add &rArr; _gx_system_view_fold
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_fold
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_free_view_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>

<P><STRONG><a name="[384]"></a>_gx_system_view_fold</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, gx_system_view_fold.o(.text._gx_system_view_fold))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_system_view_fold
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_add
</UL>

<P><STRONG><a name="[37c]"></a>_gx_system_view_split</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, gx_system_view_split.o(.text._gx_system_view_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>

<P><STRONG><a name="[35f]"></a>_gx_system_views_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_system_views_free.o(.text._gx_system_views_free))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_views_free
</UL>

<P><STRONG><a name="[360]"></a>_gx_system_views_update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_system_views_update.o(.text._gx_system_views_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_system_views_update &rArr; _gx_system_root_view_add &rArr; _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_views_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[385]"></a>_gx_text_button_create</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gx_text_button_create.o(.text._gx_text_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _gx_text_button_create &rArr; _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_text_button_create
</UL>

<P><STRONG><a name="[105]"></a>_gx_text_button_draw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gx_text_button_draw.o(.text._gx_text_button_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _gx_text_button_draw &rArr; _gx_text_button_text_draw &rArr; _gx_widget_text_id_draw &rArr; _gx_widget_text_draw_ext &rArr; _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_monochrome_driver_disabled_button_line_draw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_text_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_text_button_create.o(.text._gx_text_button_create)
</UL>
<P><STRONG><a name="[387]"></a>_gx_text_button_font_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_text_button_font_set.o(.text._gx_text_button_font_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_text_button_font_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_text_button_font_set
</UL>

<P><STRONG><a name="[388]"></a>_gx_text_button_text_color_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gx_text_button_text_color_set.o(.text._gx_text_button_text_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_text_button_text_color_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_text_button_text_color_set
</UL>

<P><STRONG><a name="[386]"></a>_gx_text_button_text_draw</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, gx_text_button_text_draw.o(.text._gx_text_button_text_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _gx_text_button_text_draw &rArr; _gx_widget_text_id_draw &rArr; _gx_widget_text_draw_ext &rArr; _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_private_string_get
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_id_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_draw
</UL>

<P><STRONG><a name="[da]"></a>_gx_utility_circle_point_get</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, gx_utility_circle_point_get.o(.text._gx_utility_circle_point_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_simple_aliased_wide_arc_draw)
<LI> gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_simple_wide_arc_draw)
</UL>
<P><STRONG><a name="[21f]"></a>_gx_utility_easing_function_calculate</STRONG> (Thumb, 1180 bytes, Stack size 40 bytes, gx_utility_easing_function_calculate.o(.text._gx_utility_easing_function_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_utility_easing_function_calculate &rArr; OUTLINED_FUNCTION_6 &rArr; _gx_utility_bounce_ease_out
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[373]"></a>_gx_utility_ltoa</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gx_utility_ltoa.o(.text._gx_utility_ltoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_utility_ltoa
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[272]"></a>_gx_utility_math_cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_utility_math_cos.o(.text._gx_utility_math_cos))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_rotate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[266]"></a>_gx_utility_math_sin</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, gx_utility_math_sin.o(.text._gx_utility_math_sin))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_rotate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[224]"></a>_gx_utility_math_sqrt</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, gx_utility_math_sqrt.o(.text._gx_utility_math_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_circle_draw
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_ellipse_draw
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_circle_draw
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_circle_fill
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[2cf]"></a>_gx_utility_rectangle_combine</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gx_utility_rectangle_combine.o(.text._gx_utility_rectangle_combine))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_composite_create
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
</UL>

<P><STRONG><a name="[2d1]"></a>_gx_utility_rectangle_define</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gx_utility_rectangle_define.o(.text._gx_utility_rectangle_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_utility_rectangle_define
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_text_draw_ext
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_define
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
</UL>

<P><STRONG><a name="[2cc]"></a>_gx_utility_rectangle_inside_detect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gx_utility_rectangle_inside_detect.o(.text._gx_utility_rectangle_inside_detect))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_block_move
</UL>

<P><STRONG><a name="[d9]"></a>_gx_utility_rectangle_overlap_detect</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gx_utility_rectangle_overlap_detect.o(.text._gx_utility_rectangle_overlap_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_text_draw_ext
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_fill
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_tile
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_overlap_detect
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_chromeart_canvas_copy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_simple_line_draw
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_canvas_copy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_simple_line_alpha_draw
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_canvas_blend
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_clipping_update
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gx_display_driver_generic_aliased_arc_draw.o(.text._gx_display_driver_generic_aliased_arc_draw)
<LI> gx_display_driver_generic_arc_draw.o(.text._gx_display_driver_generic_arc_draw)
</UL>
<P><STRONG><a name="[222]"></a>_gx_utility_rectangle_point_detect</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gx_utility_rectangle_point_detect.o(.text._gx_utility_rectangle_point_detect))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixel_draw
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_widget_find
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_circle_draw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_ellipse_draw
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_circle_draw
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_line_draw
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_simple_line_draw
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_simple_line_alpha_draw
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_fixed_point_line_draw
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_root_find
</UL>

<P><STRONG><a name="[2ce]"></a>_gx_utility_rectangle_shift</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gx_utility_rectangle_shift.o(.text._gx_utility_rectangle_shift))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_composite_create
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_chromeart_canvas_copy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_canvas_copy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_canvas_blend
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_root_find
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift_helper
</UL>

<P><STRONG><a name="[32b]"></a>_gx_utility_string_length_check</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gx_utility_string_length_check.o(.text._gx_utility_string_length_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_utility_string_length_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_string_get_ext
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_language_table_set_ext
</UL>

<P><STRONG><a name="[231]"></a>_gx_utility_utf8_string_character_get</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, gx_utility_utf8_string_character_get.o(.text._gx_utility_utf8_string_character_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_utility_utf8_string_character_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[38e]"></a>_gx_widget_allocate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gx_widget_allocate.o(.text._gx_widget_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_allocate
</UL>

<P><STRONG><a name="[2a9]"></a>_gx_widget_attach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gx_widget_attach.o(.text._gx_widget_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_menu_insert
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_attach
</UL>

<P><STRONG><a name="[357]"></a>_gx_widget_background_draw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gx_widget_background_draw.o(.text._gx_widget_background_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gx_widget_background_draw &rArr; _gx_widget_border_draw &rArr; OUTLINED_FUNCTION_11 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_draw
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_draw
</UL>

<P><STRONG><a name="[38f]"></a>_gx_widget_block_move</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, gx_widget_block_move.o(.text._gx_widget_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _gx_widget_block_move &rArr; OUTLINED_FUNCTION_0 &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_width_get
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_block_move
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_complete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_height_get
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_canvas_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
</UL>

<P><STRONG><a name="[2bc]"></a>_gx_widget_border_draw</STRONG> (Thumb, 856 bytes, Stack size 48 bytes, gx_widget_border_draw.o(.text._gx_widget_border_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_widget_border_draw &rArr; OUTLINED_FUNCTION_11 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_fill_color_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_width_set
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_define
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_height_get
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_line_color_set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_background_draw
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[2bb]"></a>_gx_widget_border_style_set</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, gx_widget_border_style_set.o(.text._gx_widget_border_style_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _gx_widget_border_style_set &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
</UL>

<P><STRONG><a name="[393]"></a>_gx_widget_border_width_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gx_widget_border_width_get.o(.text._gx_widget_border_width_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[390]"></a>_gx_widget_canvas_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gx_widget_canvas_get.o(.text._gx_widget_canvas_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_canvas_get
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_find
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_string_get_ext
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[39d]"></a>_gx_widget_child_clipping_update</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gx_widget_child_clipping_update.o(.text._gx_widget_child_clipping_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gx_widget_child_clipping_update &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>

<P><STRONG><a name="[36c]"></a>_gx_widget_child_detect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_widget_child_detect.o(.text._gx_widget_child_detect))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_remove
</UL>

<P><STRONG><a name="[39e]"></a>_gx_widget_child_focus_assign</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gx_widget_child_focus_assign.o(.text._gx_widget_child_focus_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_widget_child_focus_assign &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[2c3]"></a>_gx_widget_children_draw</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gx_widget_children_draw.o(.text._gx_widget_children_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gx_widget_children_draw &rArr; _gx_canvas_drawing_initiate &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_complete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_draw
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_draw
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_draw
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_draw
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_draw
</UL>

<P><STRONG><a name="[3a7]"></a>_gx_widget_children_event_process</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gx_widget_children_event_process.o(.text._gx_widget_children_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_children_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[396]"></a>_gx_widget_client_get</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gx_widget_client_get.o(.text._gx_widget_client_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_widget_client_get
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[39f]"></a>_gx_widget_clipping_update</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gx_widget_clipping_update.o(.text._gx_widget_clipping_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _gx_widget_clipping_update &rArr; _gx_widget_child_clipping_update &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
</UL>

<P><STRONG><a name="[3a0]"></a>_gx_widget_context_fill_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_widget_context_fill_set.o(.text._gx_widget_context_fill_set), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_fill_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[2be]"></a>_gx_widget_create</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gx_widget_create.o(.text._gx_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_create
</UL>

<P><STRONG><a name="[2af]"></a>_gx_widget_delete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gx_widget_delete.o(.text._gx_widget_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _gx_widget_delete &rArr; _gx_widget_delete_helper &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[2a7]"></a>_gx_widget_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gx_widget_detach.o(.text._gx_widget_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _gx_widget_detach &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_screen_stack_push
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[107]"></a>_gx_widget_draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_widget_draw.o(.text._gx_widget_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gx_widget_draw &rArr; _gx_widget_background_draw &rArr; _gx_widget_border_draw &rArr; OUTLINED_FUNCTION_11 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_background_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_widget_create.o(.text._gx_widget_create)
</UL>
<P><STRONG><a name="[3d0]"></a>_gx_widget_draw_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_widget_draw_set.o(.text._gx_widget_draw_set))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_draw_set
</UL>

<P><STRONG><a name="[2c2]"></a>_gx_widget_event_generate</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, gx_widget_event_generate.o(.text._gx_widget_event_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_widget_event_generate &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_deselect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[108]"></a>_gx_widget_event_process</STRONG> (Thumb, 582 bytes, Stack size 48 bytes, gx_widget_event_process.o(.text._gx_widget_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_widget_event_process &rArr; _gx_widget_event_generate &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_to_parent
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_previous
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_next
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_event_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_widget_create.o(.text._gx_widget_create)
</UL>
<P><STRONG><a name="[3d2]"></a>_gx_widget_event_process_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_widget_event_process_set.o(.text._gx_widget_event_process_set))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_event_process_set
</UL>

<P><STRONG><a name="[2c6]"></a>_gx_widget_event_to_parent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_widget_event_to_parent.o(.text._gx_widget_event_to_parent))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[3a9]"></a>_gx_widget_fill_color_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gx_widget_fill_color_set.o(.text._gx_widget_fill_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_widget_fill_color_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_fill_color_set
</UL>

<P><STRONG><a name="[3a6]"></a>_gx_widget_focus_next</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gx_widget_focus_next.o(.text._gx_widget_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_widget_focus_next &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[3a8]"></a>_gx_widget_focus_previous</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gx_widget_focus_previous.o(.text._gx_widget_focus_previous))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_widget_focus_previous &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[3a5]"></a>_gx_widget_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gx_widget_free.o(.text._gx_widget_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_widget_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>

<P><STRONG><a name="[2c7]"></a>_gx_widget_front_move</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, gx_widget_front_move.o(.text._gx_widget_front_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_widget_front_move &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[392]"></a>_gx_widget_height_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_height_get.o(.text._gx_widget_height_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[2a6]"></a>_gx_widget_hide</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, gx_widget_hide.o(.text._gx_widget_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_free
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_nav_order_initialize
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
</UL>

<P><STRONG><a name="[2c0]"></a>_gx_widget_link</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gx_widget_link.o(.text._gx_widget_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_create
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_create
</UL>

<P><STRONG><a name="[3ab]"></a>_gx_widget_nav_order_initialize</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gx_widget_nav_order_initialize.o(.text._gx_widget_nav_order_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_widget_nav_order_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[3ad]"></a>_gx_widget_scroll_shift</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gx_widget_scroll_shift.o(.text._gx_widget_scroll_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _gx_widget_scroll_shift &rArr; _gx_widget_scroll_shift_helper &rArr; _gx_system_dirty_entry_shift &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift_helper
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
</UL>

<P><STRONG><a name="[2a8]"></a>_gx_widget_shift</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gx_widget_shift.o(.text._gx_widget_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _gx_widget_shift &rArr; _gx_widget_shift_helper &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[3ac]"></a>_gx_widget_show</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, gx_widget_show.o(.text._gx_widget_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gx_widget_show &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_free
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_nav_order_initialize
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_show
</UL>

<P><STRONG><a name="[2bf]"></a>_gx_widget_status_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_widget_status_add.o(.text._gx_widget_status_add))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
</UL>

<P><STRONG><a name="[378]"></a>_gx_widget_status_remove</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_widget_status_remove.o(.text._gx_widget_status_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_status_remove
</UL>

<P><STRONG><a name="[35c]"></a>_gx_widget_string_get_ext</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gx_widget_string_get.o(.text._gx_widget_string_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_widget_string_get_ext &rArr; _gx_display_string_get_ext &rArr; _gx_display_string_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_string_get_ext
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_canvas_get
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_text_get_ext
</UL>

<P><STRONG><a name="[35b]"></a>_gx_widget_text_draw_ext</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, gx_widget_text_draw.o(.text._gx_widget_text_draw_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _gx_widget_text_draw_ext &rArr; _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_get
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_width_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_text_draw_ext
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_string_width_get_ext
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_height_get
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_line_color_set
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_font_set
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_id_draw
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_text_draw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_text_draw
</UL>

<P><STRONG><a name="[389]"></a>_gx_widget_text_id_draw</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, gx_widget_text_id_draw.o(.text._gx_widget_text_id_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _gx_widget_text_id_draw &rArr; _gx_widget_text_draw_ext &rArr; _gx_canvas_text_draw_ext &rArr; _gx_canvas_glyphs_draw &rArr; OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_string_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_text_draw
</UL>

<P><STRONG><a name="[3a2]"></a>_gx_widget_unlink</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gx_widget_unlink.o(.text._gx_widget_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete_helper
</UL>

<P><STRONG><a name="[391]"></a>_gx_widget_width_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_width_get.o(.text._gx_widget_width_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_text_draw_ext
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[3b4]"></a>_gx_window_background_draw</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gx_window_background_draw.o(.text._gx_window_background_draw))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_draw
</UL>

<P><STRONG><a name="[3b1]"></a>_gx_window_border_draw</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, gx_window_border_draw.o(.text._gx_window_border_draw), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_pixelmap_get
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_tile
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_context_fill_set
</UL>

<P><STRONG><a name="[3b3]"></a>_gx_window_create</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gx_window_create.o(.text._gx_window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_create
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_create
</UL>

<P><STRONG><a name="[109]"></a>_gx_window_draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_window_draw.o(.text._gx_window_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _gx_window_draw &rArr; _gx_widget_children_draw &rArr; _gx_canvas_drawing_initiate &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_background_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_create.o(.text._gx_window_create)
</UL>
<P><STRONG><a name="[10b]"></a>_gx_window_event_process</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, gx_window_event_process.o(.text._gx_window_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _gx_window_event_process &rArr; _gx_widget_shift &rArr; _gx_widget_shift_helper &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_nav_order_initialize
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_focus_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_create.o(.text._gx_window_create)
</UL>
<P><STRONG><a name="[3b6]"></a>_gx_window_root_create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gx_window_root_create.o(.text._gx_window_root_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_root_create
</UL>

<P><STRONG><a name="[10c]"></a>_gx_window_root_event_process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gx_window_root_event_process.o(.text._gx_window_root_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _gx_window_root_event_process &rArr; _gx_window_event_process &rArr; _gx_widget_shift &rArr; _gx_widget_shift_helper &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_shift
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_root_create.o(.text._gx_window_root_create)
</UL>
<P><STRONG><a name="[39c]"></a>_gx_window_root_find</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gx_window_root_find.o(.text._gx_window_root_find))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_find
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_find
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_canvas_get
</UL>

<P><STRONG><a name="[3b5]"></a>_gx_window_scroll</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gx_window_scroll.o(.text._gx_window_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _gx_window_scroll &rArr; _gx_widget_scroll_shift &rArr; _gx_widget_scroll_shift_helper &rArr; _gx_system_dirty_entry_shift &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[10a]"></a>_gx_window_scroll_info_get</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gx_window_scroll_info_get.o(.text._gx_window_scroll_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_window_scroll_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_create.o(.text._gx_window_create)
</UL>
<P><STRONG><a name="[3aa]"></a>_gx_window_view_update_detect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gx_window_view_update_detect.o(.text._gx_window_view_update_detect))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift_helper
</UL>

<P><STRONG><a name="[3b8]"></a>_gx_window_wallpaper_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gx_window_wallpaper_set.o(.text._gx_window_wallpaper_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gx_window_wallpaper_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_wallpaper_set
</UL>

<P><STRONG><a name="[3b9]"></a>_gxe_canvas_create</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gxe_canvas_create.o(.text._gxe_canvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gxe_canvas_create &rArr; _gx_canvas_create &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3ba]"></a>_gxe_display_active_language_set</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gxe_display_active_language_set.o(.text._gxe_display_active_language_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gxe_display_active_language_set &rArr; _gx_display_active_language_set &rArr; _gx_system_all_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_active_language_set
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3bb]"></a>_gxe_display_color_table_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gxe_display_color_table_set.o(.text._gxe_display_color_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gxe_display_color_table_set &rArr; _gx_display_color_table_set &rArr; _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_color_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3bc]"></a>_gxe_display_create</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gxe_display_create.o(.text._gxe_display_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gxe_display_create &rArr; _gx_display_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_create
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3bd]"></a>_gxe_display_font_table_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gxe_display_font_table_set.o(.text._gxe_display_font_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gxe_display_font_table_set &rArr; _gx_display_font_table_set &rArr; _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_font_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3be]"></a>_gxe_display_language_table_set_ext</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gxe_display_language_table_set.o(.text._gxe_display_language_table_set_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _gxe_display_language_table_set_ext &rArr; _gx_display_language_table_set_ext &rArr; _gx_system_all_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_string_length_check
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3bf]"></a>_gxe_display_pixelmap_table_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gxe_display_pixelmap_table_set.o(.text._gxe_display_pixelmap_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gxe_display_pixelmap_table_set &rArr; _gx_display_pixelmap_table_set &rArr; _gx_display_canvas_dirty &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_pixelmap_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3c0]"></a>_gxe_menu_insert</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gxe_menu_insert.o(.text._gxe_menu_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _gxe_menu_insert &rArr; _gx_menu_insert &rArr; _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_menu_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[3c1]"></a>_gxe_prompt_create</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gxe_prompt_create.o(.text._gxe_prompt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _gxe_prompt_create &rArr; _gx_prompt_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_create
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_prompt_create
</UL>

<P><STRONG><a name="[3c2]"></a>_gxe_prompt_font_set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gxe_prompt_font_set.o(.text._gxe_prompt_font_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gxe_prompt_font_set &rArr; _gx_prompt_font_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_font_set
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_prompt_create
</UL>

<P><STRONG><a name="[3c3]"></a>_gxe_prompt_text_color_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gxe_prompt_text_color_set.o(.text._gxe_prompt_text_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gxe_prompt_text_color_set &rArr; _gx_prompt_text_color_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_prompt_text_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_prompt_create
</UL>

<P><STRONG><a name="[295]"></a>_gxe_system_event_fold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gxe_system_event_fold.o(.text._gxe_system_event_fold))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[296]"></a>_gxe_system_event_send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gxe_system_event_send.o(.text._gxe_system_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _gxe_system_event_send &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[3c4]"></a>_gxe_system_initialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gxe_system_initialize.o(.text._gxe_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = _gxe_system_initialize &rArr; _gx_system_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_initconfig
</UL>

<P><STRONG><a name="[3c5]"></a>_gxe_system_memory_allocator_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gxe_system_memory_allocator_set.o(.text._gxe_system_memory_allocator_set))
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_memory_allocator_set
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_initconfig
</UL>

<P><STRONG><a name="[3c7]"></a>_gxe_system_scroll_appearance_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gxe_system_scroll_appearance_set.o(.text._gxe_system_scroll_appearance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_system_scroll_appearance_set &rArr; _gx_system_scroll_appearance_set &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_scroll_appearance_set
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[204]"></a>_gxe_system_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gxe_system_start.o(.text._gxe_system_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _gxe_system_start &rArr; _gx_system_start &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_start
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[3c8]"></a>_gxe_text_button_create</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gxe_text_button_create.o(.text._gxe_text_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _gxe_text_button_create &rArr; _gx_text_button_create &rArr; _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_create
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_text_button_create
</UL>

<P><STRONG><a name="[3c9]"></a>_gxe_text_button_font_set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gxe_text_button_font_set.o(.text._gxe_text_button_font_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _gxe_text_button_font_set &rArr; _gx_text_button_font_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_font_set
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_text_button_create
</UL>

<P><STRONG><a name="[3ca]"></a>_gxe_text_button_text_color_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gxe_text_button_text_color_set.o(.text._gxe_text_button_text_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gxe_text_button_text_color_set &rArr; _gx_text_button_text_color_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_text_button_text_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_text_button_create
</UL>

<P><STRONG><a name="[3cb]"></a>_gxe_utility_rectangle_define</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gxe_utility_rectangle_define.o(.text._gxe_utility_rectangle_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gxe_utility_rectangle_define &rArr; _gx_utility_rectangle_define
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_565rgb_buffer_toggle
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3cc]"></a>_gxe_utility_rectangle_overlap_detect</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gxe_utility_rectangle_overlap_detect.o(.text._gxe_utility_rectangle_overlap_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _gxe_utility_rectangle_overlap_detect &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_565rgb_buffer_toggle
</UL>

<P><STRONG><a name="[3cd]"></a>_gxe_widget_allocate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gxe_widget_allocate.o(.text._gxe_widget_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_widget_allocate &rArr; _gx_widget_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[3ce]"></a>_gxe_widget_attach</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gxe_widget_attach.o(.text._gxe_widget_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _gxe_widget_attach &rArr; _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_widget_create
</UL>

<P><STRONG><a name="[3cf]"></a>_gxe_widget_draw_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gxe_widget_draw_set.o(.text._gxe_widget_draw_set))
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_draw_set
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[3d1]"></a>_gxe_widget_event_process_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gxe_widget_event_process_set.o(.text._gxe_widget_event_process_set))
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process_set
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[3d3]"></a>_gxe_widget_fill_color_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gxe_widget_fill_color_set.o(.text._gxe_widget_fill_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gxe_widget_fill_color_set &rArr; _gx_widget_fill_color_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_fill_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[203]"></a>_gxe_widget_show</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gxe_widget_show.o(.text._gxe_widget_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gxe_widget_show &rArr; _gx_widget_show &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[3d4]"></a>_gxe_widget_status_remove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gxe_widget_status_remove.o(.text._gxe_widget_status_remove))
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[3d5]"></a>_gxe_window_create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gxe_window_create.o(.text._gxe_window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _gxe_window_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_window_create
</UL>

<P><STRONG><a name="[3d6]"></a>_gxe_window_root_create</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gxe_window_root_create.o(.text._gxe_window_root_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_create
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[3d7]"></a>_gxe_window_wallpaper_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gxe_window_wallpaper_set.o(.text._gxe_window_wallpaper_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _gxe_window_wallpaper_set &rArr; _gx_window_wallpaper_set &rArr; _gx_system_dirty_mark &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_wallpaper_set
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_window_create
</UL>

<P><STRONG><a name="[3d8]"></a>_nx_arp_dynamic_entry_delete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nx_arp_dynamic_entry_delete.o(.text._nx_arp_dynamic_entry_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_arp_dynamic_entry_delete &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_entry_allocate
</UL>

<P><STRONG><a name="[3da]"></a>_nx_arp_enable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nx_arp_enable.o(.text._nx_arp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_arp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_arp_enable
</UL>

<P><STRONG><a name="[110]"></a>_nx_arp_entry_allocate</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, nx_arp_entry_allocate.o(.text._nx_arp_entry_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _nx_arp_entry_allocate &rArr; _nx_arp_dynamic_entry_delete &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_dynamic_entry_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[3db]"></a>_nx_arp_packet_deferred_receive</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nx_arp_packet_deferred_receive.o(.text._nx_arp_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_arp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[3de]"></a>_nx_arp_packet_receive</STRONG> (Thumb, 700 bytes, Stack size 80 bytes, nx_arp_packet_receive.o(.text._nx_arp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _nx_arp_packet_receive &rArr; _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_process
</UL>

<P><STRONG><a name="[10d]"></a>_nx_arp_packet_send</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, nx_arp_packet_send.o(.text._nx_arp_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_arp_packet_send &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_periodic_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[10f]"></a>_nx_arp_periodic_update</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, nx_arp_periodic_update.o(.text._nx_arp_periodic_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _nx_arp_periodic_update &rArr; _nx_arp_packet_send &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[10e]"></a>_nx_arp_queue_process</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nx_arp_queue_process.o(.text._nx_arp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _nx_arp_queue_process &rArr; _nx_arp_packet_receive &rArr; _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[3e1]"></a>_nx_arp_queue_send</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, nx_arp_queue_send.o(.text._nx_arp_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[450]"></a>_nx_icmp_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_icmp_enable.o(.text._nx_icmp_enable))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_icmp_enable
</UL>

<P><STRONG><a name="[3e3]"></a>_nx_icmp_packet_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_icmp_packet_process.o(.text._nx_icmp_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_icmp_packet_process &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_queue_process
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
</UL>

<P><STRONG><a name="[112]"></a>_nx_icmp_packet_receive</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nx_icmp_packet_receive.o(.text._nx_icmp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_icmp_packet_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[113]"></a>_nx_icmp_queue_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nx_icmp_queue_process.o(.text._nx_icmp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_icmp_queue_process &rArr; _nx_icmp_packet_process &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[111]"></a>_nx_icmpv4_packet_process</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nx_icmpv4_packet_process.o(.text._nx_icmpv4_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _nx_icmpv4_packet_process &rArr; _nx_icmpv4_process_echo_request &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[3e5]"></a>_nx_icmpv4_process_echo_reply</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, nx_icmpv4_process_echo_reply.o(.text._nx_icmpv4_process_echo_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_icmpv4_process_echo_reply &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
</UL>

<P><STRONG><a name="[3e6]"></a>_nx_icmpv4_process_echo_request</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nx_icmpv4_process_echo_request.o(.text._nx_icmpv4_process_echo_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _nx_icmpv4_process_echo_request &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
</UL>

<P><STRONG><a name="[3eb]"></a>_nx_icmpv4_send_error_message</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, nx_icmpv4_send_error_message.o(.text._nx_icmpv4_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _nx_icmpv4_send_error_message &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_option_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[3ed]"></a>_nx_icmpv6_DAD_clear_NDCache_entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nx_icmpv6_dad_clear_ndcache_entry.o(.text._nx_icmpv6_DAD_clear_NDCache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_icmpv6_DAD_clear_NDCache_entry &rArr; _nx_nd_cache_find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
</UL>

<P><STRONG><a name="[3ef]"></a>_nx_icmpv6_dest_table_add</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nx_icmpv6_dest_table_add.o(.text._nx_icmpv6_dest_table_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _nx_icmpv6_dest_table_add &rArr; _nx_nd_cache_add_entry &rArr; _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[3f0]"></a>_nx_icmpv6_dest_table_find</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nx_icmpv6_dest_table_find.o(.text._nx_icmpv6_dest_table_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_icmpv6_dest_table_find &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[3f3]"></a>_nx_icmpv6_perform_DAD</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nx_icmpv6_perform_dad.o(.text._nx_icmpv6_perform_DAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _nx_icmpv6_perform_DAD &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_DAD_clear_NDCache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[236]"></a>_nx_icmpv6_send_error_message</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, nx_icmpv6_send_error_message.o(.text._nx_icmpv6_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_UNSPECIFIED_ADDRESS
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_routing_option
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_option_error
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[3f4]"></a>_nx_icmpv6_send_ns</STRONG> (Thumb, 332 bytes, Stack size 104 bytes, nx_icmpv6_send_ns.o(.text._nx_icmpv6_send_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_address_change_endian
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[3fb]"></a>_nx_icmpv6_send_rs</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, nx_icmpv6_send_rs.o(.text._nx_icmpv6_send_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_solicitation_check
</UL>

<P><STRONG><a name="[414]"></a>_nx_igmp_multicast_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nx_igmp_multicast_check.o(.text._nx_igmp_multicast_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_igmp_multicast_check
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[3fc]"></a>_nx_invalidate_destination_entry</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nx_invalidate_destination_entry.o(.text._nx_invalidate_destination_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_invalidate_destination_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
</UL>

<P><STRONG><a name="[3e4]"></a>_nx_ip_checksum_compute</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, nx_ip_checksum_compute.o(.text._nx_ip_checksum_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[3fd]"></a>_nx_ip_create</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, nx_ip_create.o(.text._nx_ip_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _nx_ip_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_create
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
</UL>

<P><STRONG><a name="[412]"></a>_nx_ip_deferred_link_status_process</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, nx_ip_deferred_link_status_process.o(.text._nx_ip_deferred_link_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_ip_deferred_link_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[400]"></a>_nx_ip_dispatch_process</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, nx_ip_dispatch_process.o(.text._nx_ip_dispatch_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_hop_by_hop_option
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_routing_option
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[1a8]"></a>_nx_ip_driver_deferred_processing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_ip_driver_deferred_processing.o(.text._nx_ip_driver_deferred_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>

<P><STRONG><a name="[404]"></a>_nx_ip_driver_packet_send</STRONG> (Thumb, 582 bytes, Stack size 64 bytes, nx_ip_driver_packet_send.o(.text._nx_ip_driver_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>

<P><STRONG><a name="[409]"></a>_nx_ip_fast_periodic_timer_create</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_enable
</UL>

<P><STRONG><a name="[119]"></a>_nx_ip_fragment_assembly</STRONG> (Thumb, 956 bytes, Stack size 88 bytes, nx_ip_fragment_assembly.o(.text._nx_ip_fragment_assembly))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _nx_ip_fragment_assembly &rArr; _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[451]"></a>_nx_ip_fragment_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nx_ip_fragment_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_fragment_enable
</UL>

<P><STRONG><a name="[11a]"></a>_nx_ip_fragment_packet</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, nx_ip_fragment_packet.o(.text._nx_ip_fragment_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _nx_ip_fragment_packet &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[118]"></a>_nx_ip_fragment_timeout_check</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_timeout_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _nx_ip_fragment_timeout_check &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[40c]"></a>_nx_ip_header_add</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, nx_ip_header_add.o(.text._nx_ip_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_ip_header_add &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>

<P><STRONG><a name="[423]"></a>_nx_ip_initialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ip_initialize.o(.text._nx_ip_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[406]"></a>_nx_ip_packet_deferred_receive</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nx_ip_packet_deferred_receive.o(.text._nx_ip_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[40d]"></a>_nx_ip_packet_receive</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, nx_ip_packet_receive.o(.text._nx_ip_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_ip_packet_receive &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[3ea]"></a>_nx_ip_packet_send</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nx_ip_packet_send.o(.text._nx_ip_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[115]"></a>_nx_ip_periodic_timer_entry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ip_periodic_timer_entry.o(.text._nx_ip_periodic_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_periodic_timer_entry &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[3e9]"></a>_nx_ip_route_find</STRONG> (Thumb, 312 bytes, Stack size 20 bytes, nx_ip_route_find.o(.text._nx_ip_route_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_ip_route_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[114]"></a>_nx_ip_thread_entry</STRONG> (Thumb, 640 bytes, Stack size 64 bytes, nx_ip_thread_entry.o(.text._nx_ip_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _nx_ip_thread_entry &rArr; _nxd_ipv6_router_solicitation_check &rArr; _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_get
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_deferred_link_status_process
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_solicitation_check
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[413]"></a>_nx_ipv4_option_process</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nx_ipv4_option_process.o(.text._nx_ipv4_option_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _nx_ipv4_option_process &rArr; _nx_icmpv4_send_error_message &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[116]"></a>_nx_ipv4_packet_receive</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, nx_ipv4_packet_receive.o(.text._nx_ipv4_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = _nx_ipv4_packet_receive &rArr; _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_igmp_multicast_check
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_option_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[3f8]"></a>_nx_ipv6_address_change_endian</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nx_ipv6_util.o(.text._nx_ipv6_address_change_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_ipv6_address_change_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
</UL>

<P><STRONG><a name="[415]"></a>_nx_ipv6_fragment_process</STRONG> (Thumb, 532 bytes, Stack size 120 bytes, nx_ipv6_fragment_process.o(.text._nx_ipv6_fragment_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _nx_ipv6_fragment_process &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_copy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[3fa]"></a>_nx_ipv6_header_add</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, nx_ipv6_header_add.o(.text._nx_ipv6_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_address_change_endian
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[40e]"></a>_nx_ipv6_multicast_join</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nx_ipv6_multicast_join.o(.text._nx_ipv6_multicast_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _nx_ipv6_multicast_join &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[417]"></a>_nx_ipv6_multicast_leave</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nx_ipv6_multicast_leave.o(.text._nx_ipv6_multicast_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _nx_ipv6_multicast_leave &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[418]"></a>_nx_ipv6_option_error</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nx_ipv6_option_error.o(.text._nx_ipv6_option_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_hop_by_hop_option
</UL>

<P><STRONG><a name="[416]"></a>_nx_ipv6_packet_copy</STRONG> (Thumb, 344 bytes, Stack size 52 bytes, nx_ipv6_packet_copy.o(.text._nx_ipv6_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nx_ipv6_packet_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
</UL>

<P><STRONG><a name="[3f7]"></a>_nx_ipv6_packet_send</STRONG> (Thumb, 602 bytes, Stack size 104 bytes, nx_ipv6_packet_send.o(.text._nx_ipv6_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[41c]"></a>_nx_ipv6_prefix_list_delete_entry</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, nx_ipv6_prefix_list_delete_entry.o(.text._nx_ipv6_prefix_list_delete_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _nx_ipv6_prefix_list_delete_entry &rArr; _nx_ipv6_multicast_leave &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
</UL>

<P><STRONG><a name="[402]"></a>_nx_ipv6_process_fragment_option</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nx_ipv6_process_fragment_option.o(.text._nx_ipv6_process_fragment_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _nx_ipv6_process_fragment_option &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[403]"></a>_nx_ipv6_process_hop_by_hop_option</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nx_ipv6_process_hop_by_hop_option.o(.text._nx_ipv6_process_hop_by_hop_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_option_error
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[401]"></a>_nx_ipv6_process_routing_option</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nx_ipv6_process_routing_option.o(.text._nx_ipv6_process_routing_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _nx_ipv6_process_routing_option &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[3f2]"></a>_nx_nd_cache_add_entry</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nx_nd_cache_add_entry.o(.text._nx_nd_cache_add_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _nx_nd_cache_add_entry &rArr; _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_delete_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
</UL>

<P><STRONG><a name="[41d]"></a>_nx_nd_cache_delete_internal</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nx_nd_cache_delete_internal.o(.text._nx_nd_cache_delete_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
</UL>

<P><STRONG><a name="[3ee]"></a>_nx_nd_cache_find_entry</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nx_nd_cache_find_entry.o(.text._nx_nd_cache_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_nd_cache_find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_DAD_clear_NDCache_entry
</UL>

<P><STRONG><a name="[3e2]"></a>_nx_packet_allocate</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, nx_packet_allocate.o(.text._nx_packet_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_allocate
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>

<P><STRONG><a name="[405]"></a>_nx_packet_copy</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, nx_packet_copy.o(.text._nx_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[40a]"></a>_nx_packet_data_append</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, nx_packet_data_append.o(.text._nx_packet_data_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _nx_packet_data_append &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[41f]"></a>_nx_packet_data_retrieve</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nx_packet_data_retrieve.o(.text._nx_packet_data_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_packet_data_retrieve &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_data_retrieve
</UL>

<P><STRONG><a name="[11b]"></a>_nx_packet_pool_cleanup</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nx_packet_pool_cleanup.o(.text._nx_packet_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nx_packet_pool_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_packet_allocate.o(.text._nx_packet_allocate)
</UL>
<P><STRONG><a name="[420]"></a>_nx_packet_pool_create</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, nx_packet_pool_create.o(.text._nx_packet_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _nx_packet_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
</UL>

<P><STRONG><a name="[422]"></a>_nx_packet_pool_initialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_packet_pool_initialize.o(.text._nx_packet_pool_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[3dc]"></a>_nx_packet_release</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nx_packet_release.o(.text._nx_packet_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_receive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
</UL>

<P><STRONG><a name="[3d9]"></a>_nx_packet_transmit_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nx_packet_transmit_release.o(.text._nx_packet_transmit_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_periodic_update
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_send
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_dynamic_entry_delete
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_delete_internal
</UL>

<P><STRONG><a name="[421]"></a>_nx_rarp_packet_deferred_receive</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, nx_rarp_packet_deferred_receive.o(.text._nx_rarp_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_rarp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[206]"></a>_nx_system_initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nx_system_initialize.o(.text._nx_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_system_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_initialize
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_initialize
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[11c]"></a>_nx_tcp_cleanup_deferred</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred))
<BR>[Address Reference Count : 3]<UL><LI> nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup)
<LI> nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup)
<LI> nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup)
</UL>
<P><STRONG><a name="[425]"></a>_nx_tcp_client_bind_cleanup</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, nx_tcp_client_bind_cleanup.o(.text._nx_tcp_client_bind_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_client_bind_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>

<P><STRONG><a name="[122]"></a>_nx_tcp_connect_cleanup</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept)
</UL>
<P><STRONG><a name="[11e]"></a>_nx_tcp_deferred_cleanup_check</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _nx_tcp_deferred_cleanup_check &rArr; _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[123]"></a>_nx_tcp_disconnect_cleanup</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect)
</UL>
<P><STRONG><a name="[426]"></a>_nx_tcp_enable</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nx_tcp_enable.o(.text._nx_tcp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _nx_tcp_enable &rArr; _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_enable
</UL>

<P><STRONG><a name="[11f]"></a>_nx_tcp_fast_periodic_processing</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, nx_tcp_fast_periodic_processing.o(.text._nx_tcp_fast_periodic_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = _nx_tcp_fast_periodic_processing &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[424]"></a>_nx_tcp_initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nx_tcp_initialize.o(.text._nx_tcp_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[42e]"></a>_nx_tcp_mss_option_get</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nx_tcp_mss_option_get.o(.text._nx_tcp_mss_option_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nx_tcp_mss_option_get
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[239]"></a>_nx_tcp_no_connection_reset</STRONG> (Thumb, 150 bytes, Stack size 368 bytes, nx_tcp_no_connection_reset.o(.text._nx_tcp_no_connection_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[42d]"></a>_nx_tcp_packet_process</STRONG> (Thumb, 1238 bytes, Stack size 64 bytes, nx_tcp_packet_process.o(.text._nx_tcp_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_queue_process
</UL>

<P><STRONG><a name="[121]"></a>_nx_tcp_packet_receive</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, nx_tcp_packet_receive.o(.text._nx_tcp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _nx_tcp_packet_receive &rArr; _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[244]"></a>_nx_tcp_packet_send_ack</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nx_tcp_packet_send_ack.o(.text._nx_tcp_packet_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_periodic_processing
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[430]"></a>_nx_tcp_packet_send_control</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, nx_tcp_packet_send_control.o(.text._nx_tcp_packet_send_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_probe
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>

<P><STRONG><a name="[23d]"></a>_nx_tcp_packet_send_fin</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nx_tcp_packet_send_fin.o(.text._nx_tcp_packet_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[431]"></a>_nx_tcp_packet_send_probe</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nx_tcp_packet_send_probe.o(.text._nx_tcp_packet_send_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[42c]"></a>_nx_tcp_packet_send_rst</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nx_tcp_packet_send_rst.o(.text._nx_tcp_packet_send_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>

<P><STRONG><a name="[429]"></a>_nx_tcp_packet_send_syn</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, nx_tcp_packet_send_syn.o(.text._nx_tcp_packet_send_syn))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[120]"></a>_nx_tcp_periodic_processing</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nx_tcp_periodic_processing.o(.text._nx_tcp_periodic_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_tcp_periodic_processing &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[11d]"></a>_nx_tcp_queue_process</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nx_tcp_queue_process.o(.text._nx_tcp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = _nx_tcp_queue_process &rArr; _nx_tcp_packet_process &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[124]"></a>_nx_tcp_receive_cleanup</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_receive_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive)
</UL>
<P><STRONG><a name="[432]"></a>_nx_tcp_server_socket_accept</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nx_tcp_server_socket_accept &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[435]"></a>_nx_tcp_server_socket_listen</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nx_tcp_server_socket_listen.o(.text._nx_tcp_server_socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_server_socket_listen &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_listen
</UL>

<P><STRONG><a name="[436]"></a>_nx_tcp_server_socket_relisten</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, nx_tcp_server_socket_relisten.o(.text._nx_tcp_server_socket_relisten))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _nx_tcp_server_socket_relisten &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[437]"></a>_nx_tcp_server_socket_unaccept</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, nx_tcp_server_socket_unaccept.o(.text._nx_tcp_server_socket_unaccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_tcp_server_socket_unaccept &rArr; _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[42b]"></a>_nx_tcp_socket_block_cleanup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nx_tcp_socket_block_cleanup.o(.text._nx_tcp_socket_block_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _nx_tcp_socket_block_cleanup
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[427]"></a>_nx_tcp_socket_connection_reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nx_tcp_socket_connection_reset.o(.text._nx_tcp_socket_connection_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_tcp_socket_connection_reset &rArr; _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_periodic_processing
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[43a]"></a>_nx_tcp_socket_create</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, nx_tcp_socket_create.o(.text._nx_tcp_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_socket_create &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
</UL>

<P><STRONG><a name="[43b]"></a>_nx_tcp_socket_disconnect</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[43c]"></a>_nx_tcp_socket_info_get</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, nx_tcp_socket_info_get.o(.text._nx_tcp_socket_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_socket_info_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_info_get
</UL>

<P><STRONG><a name="[42f]"></a>_nx_tcp_socket_packet_process</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, nx_tcp_socket_packet_process.o(.text._nx_tcp_socket_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_transmit_check
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_closing
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[446]"></a>_nx_tcp_socket_receive</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _nx_tcp_socket_receive &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_receive
</UL>

<P><STRONG><a name="[438]"></a>_nx_tcp_socket_receive_queue_flush</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nx_tcp_socket_receive_queue_flush.o(.text._nx_tcp_socket_receive_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_tcp_socket_receive_queue_flush &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[42a]"></a>_nx_tcp_socket_retransmit</STRONG> (Thumb, 708 bytes, Stack size 80 bytes, nx_tcp_socket_retransmit.o(.text._nx_tcp_socket_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[454]"></a>_nx_tcp_socket_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nx_tcp_socket_send.o(.text._nx_tcp_socket_send))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_send
</UL>

<P><STRONG><a name="[447]"></a>_nx_tcp_socket_send_internal</STRONG> (Thumb, 1452 bytes, Stack size 128 bytes, nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_info_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_wait
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[43d]"></a>_nx_tcp_socket_state_ack_check</STRONG> (Thumb, 918 bytes, Stack size 40 bytes, nx_tcp_socket_state_ack_check.o(.text._nx_tcp_socket_state_ack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[441]"></a>_nx_tcp_socket_state_closing</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nx_tcp_socket_state_closing.o(.text._nx_tcp_socket_state_closing))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _nx_tcp_socket_state_closing &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[23f]"></a>_nx_tcp_socket_state_data_check</STRONG> (Thumb, 896 bytes, Stack size 56 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _nx_tcp_socket_state_data_check &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[44d]"></a>_nx_tcp_socket_state_data_trim</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nx_tcp_socket_state_data_trim &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[44c]"></a>_nx_tcp_socket_state_data_trim_front</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_trim_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_tcp_socket_state_data_trim_front &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[443]"></a>_nx_tcp_socket_state_established</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nx_tcp_socket_state_established.o(.text._nx_tcp_socket_state_established))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_established &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[445]"></a>_nx_tcp_socket_state_fin_wait1</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, nx_tcp_socket_state_fin_wait1.o(.text._nx_tcp_socket_state_fin_wait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_fin_wait1 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[43f]"></a>_nx_tcp_socket_state_fin_wait2</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nx_tcp_socket_state_fin_wait2.o(.text._nx_tcp_socket_state_fin_wait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_fin_wait2 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[442]"></a>_nx_tcp_socket_state_last_ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nx_tcp_socket_state_last_ack.o(.text._nx_tcp_socket_state_last_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _nx_tcp_socket_state_last_ack &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[440]"></a>_nx_tcp_socket_state_syn_received</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, nx_tcp_socket_state_syn_received.o(.text._nx_tcp_socket_state_syn_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_tcp_socket_state_syn_received &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[43e]"></a>_nx_tcp_socket_state_syn_sent</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, nx_tcp_socket_state_syn_sent.o(.text._nx_tcp_socket_state_syn_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_tcp_socket_state_syn_sent &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[444]"></a>_nx_tcp_socket_state_transmit_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nx_tcp_socket_state_transmit_check.o(.text._nx_tcp_socket_state_transmit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _nx_tcp_socket_state_transmit_check &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[448]"></a>_nx_tcp_socket_state_wait</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nx_tcp_socket_state_wait.o(.text._nx_tcp_socket_state_wait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[44b]"></a>_nx_tcp_socket_thread_resume</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nx_tcp_socket_thread_resume.o(.text._nx_tcp_socket_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_transmit_check
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_closing
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
</UL>

<P><STRONG><a name="[434]"></a>_nx_tcp_socket_thread_suspend</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nx_tcp_socket_thread_suspend.o(.text._nx_tcp_socket_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _nx_tcp_socket_thread_suspend &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[439]"></a>_nx_tcp_socket_transmit_queue_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nx_tcp_socket_transmit_queue_flush.o(.text._nx_tcp_socket_transmit_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nx_tcp_socket_transmit_queue_flush &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[125]"></a>_nx_tcp_transmit_cleanup</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_tcp_transmit_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal)
</UL>
<P><STRONG><a name="[455]"></a>_nx_udp_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_udp_enable.o(.text._nx_udp_enable))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_enable
</UL>

<P><STRONG><a name="[126]"></a>_nx_udp_packet_receive</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, nx_udp_packet_receive.o(.text._nx_udp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _nx_udp_packet_receive &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_udp_enable.o(.text._nx_udp_enable)
</UL>
<P><STRONG><a name="[456]"></a>_nx_udp_source_extract</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nx_udp_source_extract.o(.text._nx_udp_source_extract))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_source_extract
</UL>

<P><STRONG><a name="[44f]"></a>_nxd_ipv6_find_max_prefix_length</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, nxd_ipv6_find_max_prefix_length.o(.text._nxd_ipv6_find_max_prefix_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nxd_ipv6_find_max_prefix_length
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
</UL>

<P><STRONG><a name="[3f6]"></a>_nxd_ipv6_interface_find</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, nxd_ipv6_interface_find.o(.text._nxd_ipv6_interface_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nxd_ipv6_interface_find &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_find_max_prefix_length
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>

<P><STRONG><a name="[410]"></a>_nxd_ipv6_prefix_router_timer_tick</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, nxd_ipv6_prefix_router_timer_tick.o(.text._nxd_ipv6_prefix_router_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _nxd_ipv6_prefix_router_timer_tick &rArr; _nx_ipv6_prefix_list_delete_entry &rArr; _nx_ipv6_multicast_leave &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_invalidate_destination_entry
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[41b]"></a>_nxd_ipv6_router_lookup</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, nxd_ipv6_router_lookup.o(.text._nxd_ipv6_router_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _nxd_ipv6_router_lookup &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[411]"></a>_nxd_ipv6_router_solicitation_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nxd_ipv6_router_solicitation_check.o(.text._nxd_ipv6_router_solicitation_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _nxd_ipv6_router_solicitation_check &rArr; _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[41a]"></a>_nxd_ipv6_search_onlink</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nxd_ipv6_search_onlink.o(.text._nxd_ipv6_search_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nxd_ipv6_search_onlink &rArr; CHECK_IP_ADDRESSES_BY_PREFIX &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IP_ADDRESSES_BY_PREFIX
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[209]"></a>_nxe_arp_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nxe_arp_enable.o(.text._nxe_arp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nxe_arp_enable &rArr; _nx_arp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[20d]"></a>_nxe_icmp_enable</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nxe_icmp_enable.o(.text._nxe_icmp_enable))
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[208]"></a>_nxe_ip_create</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, nxe_ip_create.o(.text._nxe_ip_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _nxe_ip_create &rArr; _nx_ip_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[20a]"></a>_nxe_ip_fragment_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nxe_ip_fragment_enable.o(.text._nxe_ip_fragment_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nxe_ip_fragment_enable &rArr; _nx_ip_fragment_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[452]"></a>_nxe_packet_allocate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nxe_packet_allocate.o(.text._nxe_packet_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[219]"></a>_nxe_packet_data_retrieve</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nxe_packet_data_retrieve.o(.text._nxe_packet_data_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nxe_packet_data_retrieve &rArr; _nx_packet_data_retrieve &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_retrieve
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[207]"></a>_nxe_packet_pool_create</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, nxe_packet_pool_create.o(.text._nxe_packet_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nxe_packet_pool_create &rArr; _tx_thread_preemption_change &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[21b]"></a>_nxe_packet_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nxe_packet_release.o(.text._nxe_packet_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _nxe_packet_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[453]"></a>_nxe_packet_transmit_release</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nxe_packet_transmit_release.o(.text._nxe_packet_transmit_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nxe_packet_transmit_release &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
</UL>

<P><STRONG><a name="[20b]"></a>_nxe_tcp_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nxe_tcp_enable.o(.text._nxe_tcp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _nxe_tcp_enable &rArr; _nx_tcp_enable &rArr; _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[212]"></a>_nxe_tcp_server_socket_accept</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nxe_tcp_server_socket_accept.o(.text._nxe_tcp_server_socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nxe_tcp_server_socket_accept &rArr; _nx_tcp_server_socket_accept &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[210]"></a>_nxe_tcp_server_socket_listen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nxe_tcp_server_socket_listen.o(.text._nxe_tcp_server_socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nxe_tcp_server_socket_listen &rArr; _nx_tcp_server_socket_listen &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[217]"></a>_nxe_tcp_server_socket_relisten</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nxe_tcp_server_socket_relisten.o(.text._nxe_tcp_server_socket_relisten))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _nxe_tcp_server_socket_relisten &rArr; _nx_tcp_server_socket_relisten &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[216]"></a>_nxe_tcp_server_socket_unaccept</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nxe_tcp_server_socket_unaccept.o(.text._nxe_tcp_server_socket_unaccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nxe_tcp_server_socket_unaccept &rArr; _nx_tcp_server_socket_unaccept &rArr; _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[20f]"></a>_nxe_tcp_socket_create</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, nxe_tcp_socket_create.o(.text._nxe_tcp_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _nxe_tcp_socket_create &rArr; _nx_tcp_socket_create &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[215]"></a>_nxe_tcp_socket_disconnect</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nxe_tcp_socket_disconnect.o(.text._nxe_tcp_socket_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[213]"></a>_nxe_tcp_socket_info_get</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nxe_tcp_socket_info_get.o(.text._nxe_tcp_socket_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _nxe_tcp_socket_info_get &rArr; _nx_tcp_socket_info_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[214]"></a>_nxe_tcp_socket_receive</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nxe_tcp_socket_receive.o(.text._nxe_tcp_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nxe_tcp_socket_receive &rArr; _nx_tcp_socket_receive &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[21a]"></a>_nxe_tcp_socket_send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, nxe_tcp_socket_send.o(.text._nxe_tcp_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _nxe_tcp_socket_send
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[20c]"></a>_nxe_udp_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nxe_udp_enable.o(.text._nxe_udp_enable))
<BR><BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[218]"></a>_nxe_udp_source_extract</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nxe_udp_source_extract.o(.text._nxe_udp_source_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nxe_udp_source_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_source_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[457]"></a>_tx_byte_allocate</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tx_byte_allocate.o(.text._tx_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_byte_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>

<P><STRONG><a name="[127]"></a>_tx_byte_pool_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_byte_pool_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
</UL>
<P><STRONG><a name="[459]"></a>_tx_byte_pool_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_byte_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[458]"></a>_tx_byte_pool_search</STRONG> (Thumb, 224 bytes, Stack size 28 bytes, tx_byte_pool_search.o(.text._tx_byte_pool_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[45a]"></a>_tx_byte_release</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tx_byte_release.o(.text._tx_byte_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _tx_byte_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
</UL>

<P><STRONG><a name="[128]"></a>_tx_event_flags_cleanup</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _tx_event_flags_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_event_flags_get.o(.text._tx_event_flags_get)
</UL>
<P><STRONG><a name="[3fe]"></a>_tx_event_flags_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tx_event_flags_create.o(.text._tx_event_flags_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_event_flags_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[40f]"></a>_tx_event_flags_get</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tx_event_flags_get.o(.text._tx_event_flags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_event_flags_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[3dd]"></a>_tx_event_flags_set</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, tx_event_flags_set.o(.text._tx_event_flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_entry
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_periodic_timer_entry
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>

<P><STRONG><a name="[45b]"></a>_tx_initialize_high_level</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[45e]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_mutex_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_get.o(.text._tx_mutex_get)
</UL>
<P><STRONG><a name="[376]"></a>_tx_mutex_create</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[242]"></a>_tx_mutex_get</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[463]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_mutex_prioritize &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[462]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[23b]"></a>_tx_mutex_put</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[129]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _tx_mutex_thread_release &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[12b]"></a>_tx_queue_cleanup</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tx_queue_cleanup.o(.text._tx_queue_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_queue_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_queue_send.o(.text._tx_queue_send)
</UL>
<P><STRONG><a name="[375]"></a>_tx_queue_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tx_queue_create.o(.text._tx_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[380]"></a>_tx_queue_receive</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, tx_queue_receive.o(.text._tx_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_queue_receive &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[36e]"></a>_tx_queue_send</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, tx_queue_send.o(.text._tx_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_flick_test
</UL>

<P><STRONG><a name="[12c]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_semaphore_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_semaphore_get.o(.text._tx_semaphore_get)
</UL>
<P><STRONG><a name="[464]"></a>_tx_semaphore_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[465]"></a>_tx_semaphore_get</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[466]"></a>_tx_semaphore_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[377]"></a>_tx_thread_create</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[379]"></a>_tx_thread_identify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[44a]"></a>_tx_thread_info_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tx_thread_info_get.o(.text._tx_thread_info_get), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[45c]"></a>_tx_thread_initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[3ff]"></a>_tx_thread_preemption_change</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tx_thread_preemption_change.o(.text._tx_thread_preemption_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_preemption_change &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[468]"></a>_tx_thread_priority_change</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tx_thread_priority_change.o(.text._tx_thread_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_priority_change
</UL>

<P><STRONG><a name="[37f]"></a>_tx_thread_resume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tx_thread_resume.o(.text._tx_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _tx_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_start
</UL>

<P><STRONG><a name="[12e]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[163]"></a>_tx_thread_sleep</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_driver_stm32h7xx
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetXPro
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_wait
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[46a]"></a>_tx_thread_stack_analyze</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, tx_thread_stack_analyze.o(.text._tx_thread_stack_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_stack_analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>

<P><STRONG><a name="[469]"></a>_tx_thread_stack_error_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tx_thread_stack_error_handler.o(.text._tx_thread_stack_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>

<P><STRONG><a name="[3e8]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
</UL>

<P><STRONG><a name="[3e7]"></a>_tx_thread_system_resume</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_resume
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_cleanup
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_cleanup
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_cleanup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_cleanup
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
</UL>

<P><STRONG><a name="[41e]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_get
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
</UL>

<P><STRONG><a name="[150]"></a>_tx_thread_time_slice</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_thread_time_slice &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_analyze
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[12d]"></a>_tx_thread_timeout</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[1b4]"></a>_tx_time_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tx_time_get.o(.text._tx_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_flick_test
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_update
</UL>

<P><STRONG><a name="[383]"></a>_tx_timer_activate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tx_timer_activate.o(.text._tx_timer_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_timer_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
</UL>

<P><STRONG><a name="[374]"></a>_tx_timer_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tx_timer_create.o(.text._tx_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_create
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[2b3]"></a>_tx_timer_deactivate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tx_timer_deactivate.o(.text._tx_timer_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_timer_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_expiration
</UL>

<P><STRONG><a name="[14f]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[382]"></a>_tx_timer_info_get</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, tx_timer_info_get.o(.text._tx_timer_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_timer_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
</UL>

<P><STRONG><a name="[45d]"></a>_tx_timer_initialize</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[470]"></a>_tx_timer_system_activate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_activate
</UL>

<P><STRONG><a name="[46f]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[12f]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_timer_thread_entry &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[471]"></a>_txe_byte_allocate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, txe_byte_allocate.o(.text._txe_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_allocate
</UL>

<P><STRONG><a name="[472]"></a>_txe_byte_pool_create</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _txe_byte_pool_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_initconfig
</UL>

<P><STRONG><a name="[473]"></a>_txe_byte_release</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, txe_byte_release.o(.text._txe_byte_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _txe_byte_release &rArr; _tx_byte_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>

<P><STRONG><a name="[168]"></a>_txe_mutex_create</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, txe_mutex_create.o(.text._txe_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _txe_mutex_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[16c]"></a>_txe_mutex_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, txe_mutex_get.o(.text._txe_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[16e]"></a>_txe_mutex_put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_mutex_put.o(.text._txe_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _txe_mutex_put &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[205]"></a>_txe_semaphore_create</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _txe_semaphore_create &rArr; _tx_thread_system_preempt_check &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[211]"></a>_txe_semaphore_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[474]"></a>_txe_semaphore_put</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_callback
</UL>

<P><STRONG><a name="[99]"></a>_txe_thread_create</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.tx_application_define)
<LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[20e]"></a>_txe_thread_priority_change</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, txe_thread_priority_change.o(.text._txe_thread_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_thread_priority_change &rArr; _tx_thread_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
</UL>

<P><STRONG><a name="[18d]"></a>bsp_DelayMS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dwt.o(.text.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayMS &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_InitHard
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_InitHard
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[a6]"></a>bsp_DelayUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_dwt.o(.text.bsp_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_ts_touch.o(.text.TOUCH_IntWakeUpForGT)
</UL>
<P><STRONG><a name="[28c]"></a>bsp_DetectLcdType</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, bsp_ts_touch.o(.text.bsp_DetectLcdType))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_DetectLcdType &rArr; STMPE811_ReadIO &rArr; STMPE811_ReadGPIO &rArr; STMPE811_ReadReg1 &rArr; STMPE811_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadIO
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_InitHard
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadID
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadMaxXY
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadID
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[16a]"></a>bsp_GetKey</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(.text.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
</UL>

<P><STRONG><a name="[166]"></a>bsp_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDWT
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[477]"></a>bsp_InitDWT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_dwt.o(.text.bsp_InitDWT))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[47b]"></a>bsp_InitExtSDRAM</STRONG> (Thumb, 640 bytes, Stack size 328 bytes, bsp_fmc_sdram.o(.text.bsp_InitExtSDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bsp_InitExtSDRAM &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[47c]"></a>bsp_InitI2C</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, bsp_i2c_gpio.o(.text.bsp_InitI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_InitI2C &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[47a]"></a>bsp_InitLed</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, bsp_led.o(.text.bsp_InitLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitLed
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[478]"></a>bsp_InitTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_timer.o(.text.bsp_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[479]"></a>bsp_InitUart</STRONG> (Thumb, 388 bytes, Stack size 248 bytes, bsp_uart_fifo.o(.text.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetUartParam
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[131]"></a>bsp_LedOff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text.bsp_LedOff))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_led.o(.text.bsp_InitLed)
</UL>
<P><STRONG><a name="[162]"></a>bsp_LedToggle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text.bsp_LedToggle))
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>

<P><STRONG><a name="[281]"></a>bsp_RunPer10ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.bsp_RunPer10ms))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[280]"></a>bsp_RunPer1ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(.text.bsp_RunPer1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = bsp_RunPer1ms &rArr; TOUCH_CapScan &rArr; GT911_Scan &rArr; TOUCH_PutKey &rArr; _gxe_system_event_fold &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[47f]"></a>bsp_SetUartParam</STRONG> (Thumb, 72 bytes, Stack size 168 bytes, bsp_uart_fifo.o(.text.bsp_SetUartParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[482]"></a>comSendBuf</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bsp_uart_fifo.o(.text.comSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>

<P><STRONG><a name="[483]"></a>comSendChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_uart_fifo.o(.text.comSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[28e]"></a>ee_ReadBytes</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_i2c_eeprom_24xx.o(.text.ee_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ee_ReadBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[297]"></a>ee_WriteBytes</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bsp_i2c_eeprom_24xx.o(.text.ee_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ee_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SaveParam
</UL>

<P><STRONG><a name="[142]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_uart_fifo.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[200]"></a>gx_initconfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_sysfunction.o(.text.gx_initconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = gx_initconfig &rArr; _gxe_system_initialize &rArr; _gx_system_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_memory_allocator_set
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[201]"></a>gx_studio_display_configure</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, guiapp_specifications.o(.text.gx_studio_display_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = gx_studio_display_configure &rArr; _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_define
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_canvas_create
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_pixelmap_table_set
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_language_table_set_ext
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_font_table_set
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_create
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_color_table_set
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_active_language_set
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_scroll_appearance_set
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_root_create
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[202]"></a>gx_studio_named_widget_create</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guiapp_specifications.o(.text.gx_studio_named_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gx_studio_named_widget_create &rArr; gx_studio_widget_create &rArr; gx_studio_nested_widget_create &rArr;  gx_studio_nested_widget_create (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_widget_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[146]"></a>gx_studio_prompt_create</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, guiapp_specifications.o(.text.gx_studio_prompt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gx_studio_prompt_create &rArr; _gxe_prompt_create &rArr; _gx_prompt_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_prompt_text_color_set
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_prompt_font_set
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_prompt_create
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiapp_specifications.o(.rodata.window_prompt_define)
</UL>
<P><STRONG><a name="[144]"></a>gx_studio_text_button_create</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, guiapp_specifications.o(.text.gx_studio_text_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = gx_studio_text_button_create &rArr; _gxe_text_button_create &rArr; _gx_text_button_create &rArr; _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_text_button_text_color_set
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_text_button_font_set
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_text_button_create
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiapp_specifications.o(.rodata.window_button_define)
</UL>
<P><STRONG><a name="[486]"></a>gx_studio_widget_create</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guiapp_specifications.o(.text.gx_studio_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = gx_studio_widget_create &rArr; gx_studio_nested_widget_create &rArr;  gx_studio_nested_widget_create (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
</UL>

<P><STRONG><a name="[145]"></a>gx_studio_window_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, guiapp_specifications.o(.text.gx_studio_window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = gx_studio_window_create &rArr; _gxe_window_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_wallpaper_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiapp_specifications.o(.rodata.window_define)
</UL>
<P><STRONG><a name="[182]"></a>i2c_Ack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[475]"></a>i2c_CheckDevice</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(.text.i2c_CheckDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_CheckDevice &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[183]"></a>i2c_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[181]"></a>i2c_ReadByte</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(.text.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>

<P><STRONG><a name="[9f]"></a>i2c_SendByte</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(.text.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_ts_gt911.o(.text.GT911_Scan)
<LI> bsp_ts_gt811.o(.text.GT811_WriteReg)
</UL>
<P><STRONG><a name="[180]"></a>i2c_Start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[184]"></a>i2c_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[a0]"></a>i2c_WaitAck</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_WriteReg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_ts_gt911.o(.text.GT911_Scan)
<LI> bsp_ts_gt811.o(.text.GT811_WriteReg)
</UL>
<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; System_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[135]"></a>memory_allocate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_sysfunction.o(.text.memory_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = memory_allocate &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sysfunction.o(.text.gx_initconfig)
</UL>
<P><STRONG><a name="[136]"></a>memory_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_sysfunction.o(.text.memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = memory_free &rArr; _txe_byte_release &rArr; _tx_byte_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sysfunction.o(.text.gx_initconfig)
</UL>
<P><STRONG><a name="[a2]"></a>nx_driver_stm32h7xx</STRONG> (Thumb, 1484 bytes, Stack size 184 bytes, nx_stm32_eth_driver.o(.text.nx_driver_stm32h7xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nx_driver_stm32h7xx &rArr; HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; ETH_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetDMAConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_BuildRxDescriptors
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DescAssignMemory
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_allocate
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_GetLinkState
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_lan8720a_netx.o(.text.NetXTest)
</UL>
<P><STRONG><a name="[a1]"></a>stm32h7_graphics_driver_setup_565rgb</STRONG> (Thumb, 1020 bytes, Stack size 280 bytes, gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = stm32h7_graphics_driver_setup_565rgb &rArr; puts &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_setup
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maintask.o(.text.MainTask)
</UL>
<P><STRONG><a name="[460]"></a>tx_application_define</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, main.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tx_application_define
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfaulthandler.o(OSKERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; HardFaultHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[496]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[4b7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4b8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[498]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b9]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4ba]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4bb]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[16b]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[4bc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4bd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4be]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[290]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = puts &rArr; fputc &rArr; comSendChar &rArr; comSendBuf &rArr; ComToUart
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13f]"></a>AppTaskStart</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(.text.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = AppTaskStart &rArr; bsp_Init &rArr; bsp_InitUart &rArr; bsp_SetUartParam &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[140]"></a>AppTaskStat</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(.text.AppTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AppTaskStat &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[141]"></a>AppTaskIDLE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.AppTaskIDLE))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.tx_application_define)
</UL>
<P><STRONG><a name="[167]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[98]"></a>AppTaskMsgPro</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.AppTaskMsgPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = AppTaskMsgPro &rArr;  AppTaskMsgPro (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgPro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9a]"></a>AppTaskUserIF</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(.text.AppTaskUserIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = AppTaskUserIF &rArr; App_Printf &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9b]"></a>AppTaskGUI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.AppTaskGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = AppTaskGUI &rArr; MainTask &rArr; gx_studio_display_configure &rArr; _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9c]"></a>AppTaskNetXPro</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.AppTaskNetXPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = AppTaskNetXPro &rArr; NetXTest &rArr; _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetXTest
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskStart)
</UL>
<P><STRONG><a name="[9d]"></a>App_Printf</STRONG> (Thumb, 72 bytes, Stack size 240 bytes, main.o(.text.App_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = App_Printf &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGUI
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserIF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.AppTaskUserIF)
</UL>
<P><STRONG><a name="[a3]"></a>tcp_listen_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, demo_lan8720a_netx.o(.text.tcp_listen_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_listen_callback &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_lan8720a_netx.o(.text.NetXTest)
</UL>
<P><STRONG><a name="[284]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[286]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[287]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[288]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[47e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[480]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[2a2]"></a>UartIRQ</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, bsp_uart_fifo.o(.text.UartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2a3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_uart_fifo.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[47d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_fmc_sdram.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSDRAM
</UL>

<P><STRONG><a name="[476]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectLcdType
</UL>

<P><STRONG><a name="[28f]"></a>TOUCH_SaveParam</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TOUCH_SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[291]"></a>TOUCH_TransX</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bsp_ts_touch.o(.text.TOUCH_TransX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TOUCH_TransX &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[292]"></a>TOUCH_TransY</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bsp_ts_touch.o(.text.TOUCH_TransY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TOUCH_TransY &rArr; OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[293]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[294]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[247]"></a>CalTwoPoint</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ts_touch.o(.text.CalTwoPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>

<P><STRONG><a name="[246]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>

<P><STRONG><a name="[29d]"></a>TOUCH_PressValid</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_ts_touch.o(.text.TOUCH_PressValid))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[29e]"></a>TOUCH_DataFilter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_ts_touch.o(.text.TOUCH_DataFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TOUCH_DataFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[17f]"></a>FT5X06_ReadReg</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsp_ts_ft5x06.o(.text.FT5X06_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT5X06_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadID
</UL>

<P><STRONG><a name="[189]"></a>GT811_WriteReg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_ts_gt811.o(.text.GT811_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT811_WriteReg &rArr; i2c_SendByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
</UL>

<P><STRONG><a name="[18a]"></a>GT811_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_ts_gt811.o(.text.GT811_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT811_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
</UL>

<P><STRONG><a name="[18f]"></a>GT911_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_ts_gt911.o(.text.GT911_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT911_ReadReg &rArr; i2c_ReadByte &rArr; i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadMaxXY
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_ReadID
</UL>

<P><STRONG><a name="[21c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ts_stmpe811.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_ReadBytes
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMPE811_WriteBytes
</UL>

<P><STRONG><a name="[489]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[48a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[137]"></a>i2c_Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(.text.i2c_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Delay &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c_gpio.o(.text.i2c_WaitAck)
</UL>
<P><STRONG><a name="[1f4]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
</UL>

<P><STRONG><a name="[1ea]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>

<P><STRONG><a name="[1f2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
</UL>

<P><STRONG><a name="[1b3]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
</UL>

<P><STRONG><a name="[1e6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1e8]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1e9]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1e1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1e3]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1d2]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d3]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d4]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d5]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d6]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d7]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d9]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1da]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1db]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1dc]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1dd]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1df]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[256]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>

<P><STRONG><a name="[259]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[276]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[270]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[1cc]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1cd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1ce]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1cf]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1cb]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
</UL>

<P><STRONG><a name="[1c9]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[17d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
</UL>

<P><STRONG><a name="[1f6]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f8]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_28 &rArr; UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f9]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1fa]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2a0]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[268]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_22 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2a1]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1a2]"></a>ETH_SetMACConfig</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[1a3]"></a>ETH_SetDMAConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetDMAConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[1ac]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
</UL>

<P><STRONG><a name="[1ae]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
</UL>

<P><STRONG><a name="[1b0]"></a>ETH_Prepare_Tx_Descriptors</STRONG> (Thumb, 724 bytes, Stack size 52 bytes, stm32h7xx_hal_eth.o(.text.ETH_Prepare_Tx_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
</UL>

<P><STRONG><a name="[1bf]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[1bc]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[1bd]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_16 &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[258]"></a>LTDC_SetConfig</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, stm32h7xx_hal_ltdc.o(.text.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>

<P><STRONG><a name="[1c6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[1c7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
</UL>

<P><STRONG><a name="[1ef]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_sdram.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[46b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[46c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[46d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[46e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[48f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_display_driver_stm32h7_565rgb.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[490]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_stm32h7_565rgb.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[491]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_stm32h7_565rgb.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[492]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_stm32h7_565rgb.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[493]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_stm32h7_565rgb.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32h7_graphics_driver_setup_565rgb
</UL>

<P><STRONG><a name="[138]"></a>stm32h7_565rgb_buffer_toggle</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_565rgb_buffer_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = stm32h7_565rgb_buffer_toggle &rArr; _gxe_utility_rectangle_overlap_detect &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_overlap_detect
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_define
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[139]"></a>gx_chromeart_pixelmap_draw</STRONG> (Thumb, 296 bytes, Stack size 36 bytes, gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_pixelmap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = gx_chromeart_pixelmap_draw &rArr; _gx_display_driver_565rgb_pixelmap_draw &rArr; _gx_display_driver_565rgb_pixelmap_blend &rArr; _gx_display_driver_565rgb_pixelmap_alpha_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[13a]"></a>gx_chromeart_pixelmap_blend</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_pixelmap_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gx_chromeart_pixelmap_blend &rArr; _gx_display_driver_565rgb_pixelmap_blend &rArr; _gx_display_driver_565rgb_pixelmap_alpha_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[13b]"></a>gx_chromeart_canvas_copy</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_canvas_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gx_chromeart_canvas_copy &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[13c]"></a>gx_chromeart_glyph_8bit_draw</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_glyph_8bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gx_chromeart_glyph_8bit_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[13d]"></a>gx_chromeart_vertical_line_draw</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_vertical_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gx_chromeart_vertical_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[13e]"></a>gx_chromeart_horizontal_line_draw</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, gx_display_driver_stm32h7_565rgb.o(.text.gx_chromeart_horizontal_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gx_chromeart_horizontal_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_stm32h7_565rgb.o(.text.stm32h7_graphics_driver_setup_565rgb)
</UL>
<P><STRONG><a name="[484]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_display_driver_stm32h7_565rgb.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_chromeart_horizontal_line_draw
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_chromeart_vertical_line_draw
</UL>

<P><STRONG><a name="[21e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_animation_update.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_utility_easing_function_calculate &rArr; OUTLINED_FUNCTION_6 &rArr; _gx_utility_bounce_ease_out
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[2d7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_canvas_glyphs_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_glyphs_draw
</UL>

<P><STRONG><a name="[25a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_canvas_glyphs_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_utf8_string_character_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_glyphs_draw
</UL>

<P><STRONG><a name="[2d8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gx_canvas_glyphs_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_glyphs_draw
</UL>

<P><STRONG><a name="[2dc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_canvas_rectangle_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
</UL>

<P><STRONG><a name="[2dd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_canvas_rectangle_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_fill
</UL>

<P><STRONG><a name="[ac]"></a>_gx_canvas_rectangle_fill</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _gx_canvas_rectangle_fill &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_draw)
</UL>
<P><STRONG><a name="[25b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_display_driver_16bpp_block_move.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_block_move
</UL>

<P><STRONG><a name="[2ef]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_display_driver_16bpp_block_move.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_block_move
</UL>

<P><STRONG><a name="[2f0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_display_driver_16bpp_block_move.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_block_move
</UL>

<P><STRONG><a name="[26c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_display_driver_16bpp_block_move.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_block_move
</UL>

<P><STRONG><a name="[220]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
</UL>

<P><STRONG><a name="[301]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
</UL>

<P><STRONG><a name="[2f4]"></a>_gx_display_driver_16bpp_pixelmap_raw_blend</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text._gx_display_driver_16bpp_pixelmap_raw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_16bpp_pixelmap_raw_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
</UL>

<P><STRONG><a name="[300]"></a>_gx_display_driver_565rgb_pixelmap_alpha_blend</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text._gx_display_driver_565rgb_pixelmap_alpha_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_alpha_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
</UL>

<P><STRONG><a name="[2f6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_raw_blend
</UL>

<P><STRONG><a name="[302]"></a>_gx_display_driver_16bpp_pixelmap_compressed_blend</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text._gx_display_driver_16bpp_pixelmap_compressed_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_16bpp_pixelmap_compressed_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_blend
</UL>

<P><STRONG><a name="[2f5]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_blend.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_alpha_blend
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_raw_blend
</UL>

<P><STRONG><a name="[303]"></a>_gx_display_driver_565rgb_pixelmap_raw_write</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text._gx_display_driver_565rgb_pixelmap_raw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_raw_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[304]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[305]"></a>_gx_display_driver_565rgb_pixelmap_alpha_write</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text._gx_display_driver_565rgb_pixelmap_alpha_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_alpha_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[306]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[307]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[248]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[308]"></a>_gx_display_driver_565rgb_pixelmap_compressed_alpha_write</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text._gx_display_driver_565rgb_pixelmap_compressed_alpha_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_compressed_alpha_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[309]"></a>_gx_display_driver_565rgb_pixelmap_compressed_write</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text._gx_display_driver_565rgb_pixelmap_compressed_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_display_driver_565rgb_pixelmap_compressed_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[30a]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[26e]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_draw.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_pixelmap_draw
</UL>

<P><STRONG><a name="[2f7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_16bpp_pixelmap_rotate.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_pixelmap_rotate
</UL>

<P><STRONG><a name="[2f1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_565rgb_glyph_1bit_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_glyph_1bit_draw
</UL>

<P><STRONG><a name="[2f2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_display_driver_565rgb_glyph_1bit_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_16bpp_glyph_1bit_draw
</UL>

<P><STRONG><a name="[2fc]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_565rgb_horizontal_pixelmap_line_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_horizontal_pixelmap_line_draw
</UL>

<P><STRONG><a name="[2fd]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_display_driver_565rgb_horizontal_pixelmap_line_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_horizontal_pixelmap_line_draw
</UL>

<P><STRONG><a name="[2fe]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_565rgb_horizontal_pixelmap_line_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_565rgb_horizontal_pixelmap_line_draw
</UL>

<P><STRONG><a name="[ad]"></a>_gx_display_driver_565rgb_mcu_draw</STRONG> (Thumb, 336 bytes, Stack size 80 bytes, gx_display_driver_565rgb_jpeg_draw.o(.text._gx_display_driver_565rgb_mcu_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_565rgb_mcu_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_565rgb_jpeg_draw.o(.text._gx_display_driver_565rgb_jpeg_draw)
</UL>
<P><STRONG><a name="[221]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_arc_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
</UL>

<P><STRONG><a name="[30e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_arc_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
</UL>

<P><STRONG><a name="[25d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_arc_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
</UL>

<P><STRONG><a name="[223]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_ellipse_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_ellipse_draw
</UL>

<P><STRONG><a name="[249]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_filled_circle_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
</UL>

<P><STRONG><a name="[225]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_filled_circle_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
</UL>

<P><STRONG><a name="[30f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_filled_circle_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
</UL>

<P><STRONG><a name="[310]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_fixed_point_line_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>

<P><STRONG><a name="[311]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_fixed_point_line_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>

<P><STRONG><a name="[24a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_line_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_line_draw
</UL>

<P><STRONG><a name="[312]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_line_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_line_draw
</UL>

<P><STRONG><a name="[25f]"></a>_gx_display_driver_generic_simple_aliased_wide_arc_draw</STRONG> (Thumb, 2060 bytes, Stack size 192 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_simple_aliased_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _gx_display_driver_generic_simple_aliased_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[26d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; _gx_display_driver_generic_simple_aliased_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[25e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _gx_display_driver_generic_simple_aliased_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[313]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[226]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_display_driver_generic_aliased_filled_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[24b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[325]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[273]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[260]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
</UL>

<P><STRONG><a name="[314]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
</UL>

<P><STRONG><a name="[228]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
</UL>

<P><STRONG><a name="[317]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_display_driver_generic_alphamap_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_alphamap_draw
</UL>

<P><STRONG><a name="[318]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_generic_alphamap_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_alphamap_draw
</UL>

<P><STRONG><a name="[261]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_arc_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
</UL>

<P><STRONG><a name="[229]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_arc_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
</UL>

<P><STRONG><a name="[319]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_arc_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
</UL>

<P><STRONG><a name="[31a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_display_driver_generic_arc_fill.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
</UL>

<P><STRONG><a name="[24c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_display_driver_generic_circle_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_circle_draw
</UL>

<P><STRONG><a name="[31b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_generic_circle_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_circle_draw
</UL>

<P><STRONG><a name="[31c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_display_driver_generic_ellipse_draw.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
</UL>

<P><STRONG><a name="[31d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_display_driver_generic_ellipse_draw.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
</UL>

<P><STRONG><a name="[31e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_display_driver_generic_ellipse_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
</UL>

<P><STRONG><a name="[22a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gx_display_driver_generic_ellipse_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
</UL>

<P><STRONG><a name="[31f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_ellipse_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
</UL>

<P><STRONG><a name="[320]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_glyph_4bpp_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_glyph_4bit_draw
</UL>

<P><STRONG><a name="[321]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gx_display_driver_generic_glyph_4bpp_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_glyph_4bit_draw
</UL>

<P><STRONG><a name="[322]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_generic_glyph_8bpp_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_glyph_8bit_draw
</UL>

<P><STRONG><a name="[324]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_display_driver_generic_polygon_fill.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_polygon_fill
</UL>

<P><STRONG><a name="[24d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_generic_polygon_fill.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_polygon_fill
</UL>

<P><STRONG><a name="[250]"></a>_gx_display_driver_generic_simple_wide_arc_draw</STRONG> (Thumb, 1376 bytes, Stack size 168 bytes, gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_simple_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _gx_display_driver_generic_simple_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[326]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_display_driver_generic_wide_arc_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
</UL>

<P><STRONG><a name="[24f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_display_driver_generic_wide_arc_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _gx_display_driver_generic_simple_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
</UL>

<P><STRONG><a name="[22b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gx_display_driver_generic_wide_arc_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_display_driver_generic_filled_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_filled_circle_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
</UL>

<P><STRONG><a name="[dc]"></a>_gx_image_reader_one_row_convert</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_one_row_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
</UL>
<P><STRONG><a name="[dd]"></a>_gx_image_reader_one_row_dither</STRONG> (Thumb, 510 bytes, Stack size 80 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_image_reader_one_row_dither &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
</UL>
<P><STRONG><a name="[339]"></a>_gx_image_reader_jpeg_decode_blocks</STRONG> (Thumb, 1120 bytes, Stack size 112 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_decode_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_mcu_decode
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode
</UL>

<P><STRONG><a name="[33a]"></a>_gx_image_reader_jpeg_one_block_decode</STRONG> (Thumb, 524 bytes, Stack size 568 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_one_block_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_1d_idct
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_huffcode_find
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_bits_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode_blocks
</UL>

<P><STRONG><a name="[33b]"></a>_gx_image_reader_jpeg_bits_get</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_bits_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _gx_image_reader_jpeg_bits_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
</UL>

<P><STRONG><a name="[33c]"></a>_gx_image_reader_jpeg_huffcode_find</STRONG> (Thumb, 126 bytes, Stack size 36 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_huffcode_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
</UL>

<P><STRONG><a name="[33d]"></a>_gx_image_reader_jpeg_1d_idct</STRONG> (Thumb, 276 bytes, Stack size 36 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_1d_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _gx_image_reader_jpeg_1d_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
</UL>

<P><STRONG><a name="[340]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_read_callback_set
</UL>

<P><STRONG><a name="[341]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_read_callback_set
</UL>

<P><STRONG><a name="[de]"></a>_gx_image_reader_1bpp_transparent_read</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_transparent_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[df]"></a>_gx_image_reader_1bpp_pixel_read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_pixel_read))
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e0]"></a>_gx_image_reader_4bit_grayscale_pixel_read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_read))
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e1]"></a>_gx_image_reader_4bit_grayscale_transparent_read</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_4bit_grayscale_transparent_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e2]"></a>_gx_image_reader_4444argb_pixel_read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4444argb_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e3]"></a>_gx_image_reader_8bit_alpha_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_alpha_read))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e4]"></a>_gx_image_reader_8bit_palette_pixel_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_palette_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_8bit_palette_pixel_read
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e5]"></a>_gx_image_reader_1555xrgb_pixel_read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_1555xrgb_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e6]"></a>_gx_image_reader_565rgb_pixel_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_565rgb_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_565rgb_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e7]"></a>_gx_image_reader_32argb_pixel_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32argb_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e8]"></a>_gx_image_reader_64bit_pixel_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_64bit_pixel_read))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[e9]"></a>_gx_image_reader_48bit_pixel_read</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_48bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_48bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ea]"></a>_gx_image_reader_32bit_pixel_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_pixel_read))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[eb]"></a>_gx_image_reader_24bit_pixel_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_24bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_24bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ec]"></a>_gx_image_reader_32bit_gray_alpha_read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_gray_alpha_read))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ed]"></a>_gx_image_reader_16bit_gray_alpha_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_alpha_read))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ee]"></a>_gx_image_reader_16bit_gray_read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_16bit_gray_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ef]"></a>_gx_image_reader_8bit_pixel_read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_8bit_pixel_read
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[f0]"></a>_gx_image_reader_4bit_pixel_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_4bit_pixel_read
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[f1]"></a>_gx_image_reader_2bit_pixel_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_2bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_2bit_pixel_read
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[f2]"></a>_gx_image_reader_1bit_pixel_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_1bit_pixel_read
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[330]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_1bit_pixel_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_2bit_pixel_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_pixel_read
</UL>

<P><STRONG><a name="[333]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_pixel_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_palette_pixel_read
</UL>

<P><STRONG><a name="[32f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_16bit_gray_alpha_read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_32bit_gray_alpha_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_32bit_pixel_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_64bit_pixel_read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_alpha_read
</UL>

<P><STRONG><a name="[331]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_pixel_read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_1bpp_pixel_read
</UL>

<P><STRONG><a name="[f3]"></a>_gx_image_reader_monochrome_pixel_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_image_reader_monochrome_pixel_write &rArr; OUTLINED_FUNCTION_1 &rArr; _gx_image_reader_rgb2gray
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[f4]"></a>_gx_image_reader_monochrome_transparent_write</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_transparent_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_image_reader_monochrome_transparent_write &rArr; OUTLINED_FUNCTION_1 &rArr; _gx_image_reader_rgb2gray
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[f5]"></a>_gx_image_reader_4bit_grayscale_pixel_write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_image_reader_4bit_grayscale_pixel_write &rArr; OUTLINED_FUNCTION_1 &rArr; _gx_image_reader_rgb2gray
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[f6]"></a>_gx_image_reader_4bit_grayscale_transparent_write</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_image_reader_4bit_grayscale_transparent_write &rArr; OUTLINED_FUNCTION_1 &rArr; _gx_image_reader_rgb2gray
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[f7]"></a>_gx_image_reader_8bit_palette_write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_palette_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _gx_image_reader_8bit_palette_write &rArr; _gx_image_reader_nearest_palette_color_get
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_nearest_palette_color_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[f8]"></a>_gx_image_reader_8bit_alpha_write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_alpha_write))
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[f9]"></a>_gx_image_reader_32argb_pixel_write</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_32argb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_32argb_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[fa]"></a>_gx_image_reader_24xrgb_pixel_write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_24xrgb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_24xrgb_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[fb]"></a>_gx_image_reader_4444argb_transparent_write</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_transparent_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_image_reader_4444argb_transparent_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[fc]"></a>_gx_image_reader_4444argb_pixel_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_4444argb_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[fd]"></a>_gx_image_reader_1555xrgb_rle_pixel_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_rle_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_1555xrgb_rle_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[fe]"></a>_gx_image_reader_1555xrgb_pixel_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_1555xrgb_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[ff]"></a>_gx_image_reader_565rgb_rle_pixel_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_rle_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_565rgb_rle_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[100]"></a>_gx_image_reader_565rgb_pixel_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_565rgb_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[32e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_565rgb_rle_pixel_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_1555xrgb_rle_pixel_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4444argb_pixel_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4444argb_transparent_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_24xrgb_pixel_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_32argb_pixel_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_alpha_write
</UL>

<P><STRONG><a name="[32c]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_565rgb_pixel_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_1555xrgb_pixel_write
</UL>

<P><STRONG><a name="[32d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_565rgb_pixel_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_1555xrgb_pixel_write
</UL>

<P><STRONG><a name="[332]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_palette_write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_transparent_write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_pixel_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_transparent_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_pixel_write
</UL>

<P><STRONG><a name="[251]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _gx_image_reader_rgb2gray
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rgb2gray
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_transparent_write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_pixel_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_transparent_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_pixel_write
</UL>

<P><STRONG><a name="[33e]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_transparent_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_pixel_write
</UL>

<P><STRONG><a name="[33f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_transparent_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_pixel_write
</UL>

<P><STRONG><a name="[344]"></a>_gx_image_reader_png_4bytes_read</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_4bytes_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_image_reader_png_4bytes_read
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[345]"></a>_gx_image_reader_png_crc_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_crc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_png_crc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[346]"></a>_gx_image_reader_png_chunk_type_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_chunk_type_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_png_chunk_type_read
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[343]"></a>_gx_image_reader_png_bits_get</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_bits_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gx_image_reader_png_bits_get &rArr; _gx_image_reader_png_4bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_chunk_type_read
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_crc_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_4bytes_read
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[348]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_image_reader_png_decode.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[349]"></a>_gx_image_reader_png_huffcode_decode</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_huffcode_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _gx_image_reader_png_huffcode_decode &rArr; _gx_image_reader_png_bits_get &rArr; _gx_image_reader_png_4bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_revert
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_dynamic_huffman_code_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[262]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_image_reader_png_decode.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[34a]"></a>_gx_image_reader_png_dynamic_huffman_code_find</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_dynamic_huffman_code_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_image_reader_png_dynamic_huffman_code_find &rArr; _gx_image_reader_png_bits_revert
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_revert
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[34b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_image_reader_png_decode.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[347]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_image_reader_png_decode.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_chunk_type_read
</UL>

<P><STRONG><a name="[34c]"></a>_gx_image_reader_png_bits_revert</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_bits_revert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_png_bits_revert
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_dynamic_huffman_code_find
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
</UL>

<P><STRONG><a name="[34e]"></a>_gx_image_reader_rle_one_row_encode</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_one_row_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_image_reader_rle_one_row_encode &rArr; _gx_image_reader_rle_count_write
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_count_location_get
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_count_write
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode_size_get
</UL>

<P><STRONG><a name="[350]"></a>_gx_image_reader_rle_count_write</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_count_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_rle_count_write
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>

<P><STRONG><a name="[351]"></a>_gx_image_reader_rle_count_location_get</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_count_location_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_rle_count_location_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>

<P><STRONG><a name="[253]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_image_reader_start.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[22d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_image_reader_start.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_image_reader_pixel_read_callback_set
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_read_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[264]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_image_reader_start.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[363]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_system_canvas_refresh.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[22f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_system_dirty_list_trim.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
</UL>

<P><STRONG><a name="[230]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_system_string_width_get.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_utility_utf8_string_character_get
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_utf8_string_character_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_string_width_get_ext
</UL>

<P><STRONG><a name="[274]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; _gx_utility_bounce_ease_out
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_bounce_ease_out
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[38a]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[38b]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[38c]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[254]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[38d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[271]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[265]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_utility_easing_function_calculate.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>

<P><STRONG><a name="[275]"></a>_gx_utility_bounce_ease_out</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gx_utility_easing_function_calculate.o(.text._gx_utility_bounce_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_utility_bounce_ease_out
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[232]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_widget_block_move.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[26f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[234]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[394]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[395]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[397]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[398]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[399]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[39a]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[39b]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[267]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[255]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _gx_canvas_pixel_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixel_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[257]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gx_widget_border_draw.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[3a1]"></a>_gx_widget_delete_helper</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gx_widget_delete.o(.text._gx_widget_delete_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _gx_widget_delete_helper &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_remove
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_remove
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_private_string_delete
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
</UL>

<P><STRONG><a name="[3ae]"></a>_gx_widget_scroll_shift_helper</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gx_widget_scroll_shift.o(.text._gx_widget_scroll_shift_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gx_widget_scroll_shift_helper &rArr; _gx_system_dirty_entry_shift &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
</UL>

<P><STRONG><a name="[3af]"></a>_gx_widget_shift_helper</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, gx_widget_shift.o(.text._gx_widget_shift_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _gx_widget_shift_helper &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
</UL>

<P><STRONG><a name="[3b7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_window_scroll_info_get.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll_info_get
</UL>

<P><STRONG><a name="[488]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guiapp_specifications.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_prompt_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_text_button_create
</UL>

<P><STRONG><a name="[487]"></a>gx_studio_nested_widget_create</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, guiapp_specifications.o(.text.gx_studio_nested_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = gx_studio_nested_widget_create &rArr;  gx_studio_nested_widget_create (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_menu_insert
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_status_remove
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_fill_color_set
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_event_process_set
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_draw_set
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_widget_create
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[177]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[178]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[179]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[17a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720a.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[3df]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_arp_packet_receive.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[3e0]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_arp_packet_receive.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[3ec]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_icmpv4_send_error_message.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>

<P><STRONG><a name="[235]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nx_ip_dispatch_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[407]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_ip_driver_packet_send.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
</UL>

<P><STRONG><a name="[408]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nx_ip_driver_packet_send.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
</UL>

<P><STRONG><a name="[117]"></a>_nx_ip_fast_periodic_timer_entry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _nx_ip_fast_periodic_timer_entry &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create)
</UL>
<P><STRONG><a name="[40b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nx_ip_fragment_packet.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
</UL>

<P><STRONG><a name="[237]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_ipv6_packet_send.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[170]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_ipv6_util.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_UNSPECIFIED_ADDRESS
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>

<P><STRONG><a name="[428]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nx_tcp_fast_periodic_processing.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
</UL>

<P><STRONG><a name="[238]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_tcp_packet_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[23a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nx_tcp_server_socket_relisten.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[23c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nx_tcp_socket_disconnect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[23e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nx_tcp_socket_packet_process.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_socket_state_data_check &rArr; OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[240]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nx_tcp_socket_receive.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
</UL>

<P><STRONG><a name="[241]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_tcp_socket_send_internal.o(.text.OUTLINED_FUNCTION_0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[449]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nx_tcp_socket_send_internal.o(.text.OUTLINED_FUNCTION_1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[243]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nx_tcp_socket_state_data_check.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[44e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nx_udp_packet_receive.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[245]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nx_udp_packet_receive.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ipv6_header_add &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_thread_stack_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[499]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[497]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[49c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[49b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[143]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
